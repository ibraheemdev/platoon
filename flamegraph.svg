<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1014" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="997.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="997.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[heap]] (187 samples, 0.63%)</title><rect x="0.0000%" y="933" width="0.6307%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="943.50"></text></g><g><title>__libc_recv (187 samples, 0.63%)</title><rect x="0.0000%" y="917" width="0.6307%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="927.50"></text></g><g><title>[unknown] (187 samples, 0.63%)</title><rect x="0.0000%" y="901" width="0.6307%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="911.50"></text></g><g><title>[[stack]] (59 samples, 0.20%)</title><rect x="0.6307%" y="933" width="0.1990%" height="15" fill="rgb(248,212,6)"/><text x="0.8807%" y="943.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (59 samples, 0.20%)</title><rect x="0.6307%" y="917" width="0.1990%" height="15" fill="rgb(208,68,35)"/><text x="0.8807%" y="927.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (59 samples, 0.20%)</title><rect x="0.6307%" y="901" width="0.1990%" height="15" fill="rgb(232,128,0)"/><text x="0.8807%" y="911.50"></text></g><g><title>&lt;smoller_http::compat::HyperStream as tokio::io::async_read::AsyncRead&gt;::poll_read (59 samples, 0.20%)</title><rect x="0.6307%" y="885" width="0.1990%" height="15" fill="rgb(207,160,47)"/><text x="0.8807%" y="895.50"></text></g><g><title>&lt;smoller::net::TcpStream as futures_io::if_std::AsyncRead&gt;::poll_read (59 samples, 0.20%)</title><rect x="0.6307%" y="869" width="0.1990%" height="15" fill="rgb(228,23,34)"/><text x="0.8807%" y="879.50"></text></g><g><title>std::net::udp::UdpSocket::recv (59 samples, 0.20%)</title><rect x="0.6307%" y="853" width="0.1990%" height="15" fill="rgb(218,30,26)"/><text x="0.8807%" y="863.50"></text></g><g><title>std::sys_common::net::UdpSocket::recv (59 samples, 0.20%)</title><rect x="0.6307%" y="837" width="0.1990%" height="15" fill="rgb(220,122,19)"/><text x="0.8807%" y="847.50"></text></g><g><title>std::sys::unix::net::Socket::read (59 samples, 0.20%)</title><rect x="0.6307%" y="821" width="0.1990%" height="15" fill="rgb(250,228,42)"/><text x="0.8807%" y="831.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (59 samples, 0.20%)</title><rect x="0.6307%" y="805" width="0.1990%" height="15" fill="rgb(240,193,28)"/><text x="0.8807%" y="815.50"></text></g><g><title>__libc_recv (59 samples, 0.20%)</title><rect x="0.6307%" y="789" width="0.1990%" height="15" fill="rgb(216,20,37)"/><text x="0.8807%" y="799.50"></text></g><g><title>[unknown] (59 samples, 0.20%)</title><rect x="0.6307%" y="773" width="0.1990%" height="15" fill="rgb(206,188,39)"/><text x="0.8807%" y="783.50"></text></g><g><title>&lt;smoller::net::TcpStream as futures_io::if_std::AsyncRead&gt;::poll_read (25 samples, 0.08%)</title><rect x="1.2681%" y="917" width="0.0843%" height="15" fill="rgb(217,207,13)"/><text x="1.5181%" y="927.50"></text></g><g><title>smoller::runtime::core::Core::poll_ready (25 samples, 0.08%)</title><rect x="1.2681%" y="901" width="0.0843%" height="15" fill="rgb(231,73,38)"/><text x="1.5181%" y="911.50"></text></g><g><title>smoller::util::LocalCell&lt;T&gt;::with (25 samples, 0.08%)</title><rect x="1.2681%" y="885" width="0.0843%" height="15" fill="rgb(225,20,46)"/><text x="1.5181%" y="895.50"></text></g><g><title>smoller::runtime::core::Core::poll_ready::{{closure}} (25 samples, 0.08%)</title><rect x="1.2681%" y="869" width="0.0843%" height="15" fill="rgb(210,31,41)"/><text x="1.5181%" y="879.50"></text></g><g><title>smoller::runtime::core::Core::modify_source (25 samples, 0.08%)</title><rect x="1.2681%" y="853" width="0.0843%" height="15" fill="rgb(221,200,47)"/><text x="1.5181%" y="863.50"></text></g><g><title>polling::Poller::modify (25 samples, 0.08%)</title><rect x="1.2681%" y="837" width="0.0843%" height="15" fill="rgb(226,26,5)"/><text x="1.5181%" y="847.50"></text></g><g><title>polling::epoll::Poller::modify (25 samples, 0.08%)</title><rect x="1.2681%" y="821" width="0.0843%" height="15" fill="rgb(249,33,26)"/><text x="1.5181%" y="831.50"></text></g><g><title>polling::epoll::Poller::ctl (25 samples, 0.08%)</title><rect x="1.2681%" y="805" width="0.0843%" height="15" fill="rgb(235,183,28)"/><text x="1.5181%" y="815.50"></text></g><g><title>__GI_epoll_ctl (25 samples, 0.08%)</title><rect x="1.2681%" y="789" width="0.0843%" height="15" fill="rgb(221,5,38)"/><text x="1.5181%" y="799.50"></text></g><g><title>[unknown] (25 samples, 0.08%)</title><rect x="1.2681%" y="773" width="0.0843%" height="15" fill="rgb(247,18,42)"/><text x="1.5181%" y="783.50"></text></g><g><title>__GI_epoll_ctl (7 samples, 0.02%)</title><rect x="1.3524%" y="917" width="0.0236%" height="15" fill="rgb(241,131,45)"/><text x="1.6024%" y="927.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="1.3524%" y="901" width="0.0236%" height="15" fill="rgb(249,31,29)"/><text x="1.6024%" y="911.50"></text></g><g><title>__libc_recv (8,420 samples, 28.40%)</title><rect x="2.1686%" y="277" width="28.3970%" height="15" fill="rgb(225,111,53)"/><text x="2.4186%" y="287.50">__libc_recv</text></g><g><title>[unknown] (8,376 samples, 28.25%)</title><rect x="2.3170%" y="261" width="28.2486%" height="15" fill="rgb(238,160,17)"/><text x="2.5670%" y="271.50">[unknown]</text></g><g><title>[unknown] (8,365 samples, 28.21%)</title><rect x="2.3541%" y="245" width="28.2115%" height="15" fill="rgb(214,148,48)"/><text x="2.6041%" y="255.50">[unknown]</text></g><g><title>[unknown] (8,329 samples, 28.09%)</title><rect x="2.4755%" y="229" width="28.0901%" height="15" fill="rgb(232,36,49)"/><text x="2.7255%" y="239.50">[unknown]</text></g><g><title>[unknown] (8,192 samples, 27.63%)</title><rect x="2.9375%" y="213" width="27.6281%" height="15" fill="rgb(209,103,24)"/><text x="3.1875%" y="223.50">[unknown]</text></g><g><title>[unknown] (6,983 samples, 23.55%)</title><rect x="7.0149%" y="197" width="23.5506%" height="15" fill="rgb(229,88,8)"/><text x="7.2649%" y="207.50">[unknown]</text></g><g><title>[unknown] (5,923 samples, 19.98%)</title><rect x="10.5899%" y="181" width="19.9757%" height="15" fill="rgb(213,181,19)"/><text x="10.8399%" y="191.50">[unknown]</text></g><g><title>[unknown] (4,535 samples, 15.29%)</title><rect x="15.2710%" y="165" width="15.2946%" height="15" fill="rgb(254,191,54)"/><text x="15.5210%" y="175.50">[unknown]</text></g><g><title>[unknown] (3,516 samples, 11.86%)</title><rect x="18.7076%" y="149" width="11.8579%" height="15" fill="rgb(241,83,37)"/><text x="18.9576%" y="159.50">[unknown]</text></g><g><title>[unknown] (2,526 samples, 8.52%)</title><rect x="22.0465%" y="133" width="8.5191%" height="15" fill="rgb(233,36,39)"/><text x="22.2965%" y="143.50">[unknown]</text></g><g><title>[unknown] (1,393 samples, 4.70%)</title><rect x="25.8676%" y="117" width="4.6980%" height="15" fill="rgb(226,3,54)"/><text x="26.1176%" y="127.50">[unkn..</text></g><g><title>[unknown] (1,022 samples, 3.45%)</title><rect x="27.1188%" y="101" width="3.4468%" height="15" fill="rgb(245,192,40)"/><text x="27.3688%" y="111.50">[un..</text></g><g><title>[unknown] (137 samples, 0.46%)</title><rect x="30.1035%" y="85" width="0.4620%" height="15" fill="rgb(238,167,29)"/><text x="30.3535%" y="95.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="30.5521%" y="69" width="0.0135%" height="15" fill="rgb(232,182,51)"/><text x="30.8021%" y="79.50"></text></g><g><title>__libc_start_main (8,660 samples, 29.21%)</title><rect x="1.3760%" y="917" width="29.2064%" height="15" fill="rgb(231,60,39)"/><text x="1.6260%" y="927.50">__libc_start_main</text></g><g><title>main (8,660 samples, 29.21%)</title><rect x="1.3760%" y="901" width="29.2064%" height="15" fill="rgb(208,69,12)"/><text x="1.6260%" y="911.50">main</text></g><g><title>std::rt::lang_start_internal (8,660 samples, 29.21%)</title><rect x="1.3760%" y="885" width="29.2064%" height="15" fill="rgb(235,93,37)"/><text x="1.6260%" y="895.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (8,660 samples, 29.21%)</title><rect x="1.3760%" y="869" width="29.2064%" height="15" fill="rgb(213,116,39)"/><text x="1.6260%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8,660 samples, 29.21%)</title><rect x="1.3760%" y="853" width="29.2064%" height="15" fill="rgb(222,207,29)"/><text x="1.6260%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8,660 samples, 29.21%)</title><rect x="1.3760%" y="837" width="29.2064%" height="15" fill="rgb(206,96,30)"/><text x="1.6260%" y="847.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (8,660 samples, 29.21%)</title><rect x="1.3760%" y="821" width="29.2064%" height="15" fill="rgb(218,138,4)"/><text x="1.6260%" y="831.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (8,660 samples, 29.21%)</title><rect x="1.3760%" y="805" width="29.2064%" height="15" fill="rgb(250,191,14)"/><text x="1.6260%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8,660 samples, 29.21%)</title><rect x="1.3760%" y="789" width="29.2064%" height="15" fill="rgb(239,60,40)"/><text x="1.6260%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8,660 samples, 29.21%)</title><rect x="1.3760%" y="773" width="29.2064%" height="15" fill="rgb(206,27,48)"/><text x="1.6260%" y="783.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (8,660 samples, 29.21%)</title><rect x="1.3760%" y="757" width="29.2064%" height="15" fill="rgb(225,35,8)"/><text x="1.6260%" y="767.50">core::ops::function::impls::&lt;impl core::ops::fu..</text></g><g><title>std::rt::lang_start::{{closure}} (8,660 samples, 29.21%)</title><rect x="1.3760%" y="741" width="29.2064%" height="15" fill="rgb(250,213,24)"/><text x="1.6260%" y="751.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,660 samples, 29.21%)</title><rect x="1.3760%" y="725" width="29.2064%" height="15" fill="rgb(247,123,22)"/><text x="1.6260%" y="735.50">std::sys_common::backtrace::__rust_begin_short_..</text></g><g><title>core::ops::function::FnOnce::call_once (8,660 samples, 29.21%)</title><rect x="1.3760%" y="709" width="29.2064%" height="15" fill="rgb(231,138,38)"/><text x="1.6260%" y="719.50">core::ops::function::FnOnce::call_once</text></g><g><title>smoller_http::main (8,660 samples, 29.21%)</title><rect x="1.3760%" y="693" width="29.2064%" height="15" fill="rgb(231,145,46)"/><text x="1.6260%" y="703.50">smoller_http::main</text></g><g><title>smoller::runtime::block_on (8,660 samples, 29.21%)</title><rect x="1.3760%" y="677" width="29.2064%" height="15" fill="rgb(251,118,11)"/><text x="1.6260%" y="687.50">smoller::runtime::block_on</text></g><g><title>smoller::runtime::Runtime::block_on (8,660 samples, 29.21%)</title><rect x="1.3760%" y="661" width="29.2064%" height="15" fill="rgb(217,147,25)"/><text x="1.6260%" y="671.50">smoller::runtime::Runtime::block_on</text></g><g><title>smoller::runtime::core::Core::block_on (8,660 samples, 29.21%)</title><rect x="1.3760%" y="645" width="29.2064%" height="15" fill="rgb(247,81,37)"/><text x="1.6260%" y="655.50">smoller::runtime::core::Core::block_on</text></g><g><title>smoller::util::LocalCell&lt;T&gt;::with (8,660 samples, 29.21%)</title><rect x="1.3760%" y="629" width="29.2064%" height="15" fill="rgb(209,12,38)"/><text x="1.6260%" y="639.50">smoller::util::LocalCell&lt;T&gt;::with</text></g><g><title>smoller::runtime::core::Core::block_on::{{closure}} (8,660 samples, 29.21%)</title><rect x="1.3760%" y="613" width="29.2064%" height="15" fill="rgb(227,1,9)"/><text x="1.6260%" y="623.50">smoller::runtime::core::Core::block_on::{{closu..</text></g><g><title>smoller::runtime::core::RawTask&lt;F&gt;::run (8,660 samples, 29.21%)</title><rect x="1.3760%" y="597" width="29.2064%" height="15" fill="rgb(248,47,43)"/><text x="1.6260%" y="607.50">smoller::runtime::core::RawTask&lt;F&gt;::run</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,660 samples, 29.21%)</title><rect x="1.3760%" y="581" width="29.2064%" height="15" fill="rgb(221,10,30)"/><text x="1.6260%" y="591.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as ..</text></g><g><title>smoller_http::main::{{closure}}::{{closure}} (8,660 samples, 29.21%)</title><rect x="1.3760%" y="565" width="29.2064%" height="15" fill="rgb(210,229,1)"/><text x="1.6260%" y="575.50">smoller_http::main::{{closure}}::{{closure}}</text></g><g><title>&lt;hyper::server::conn::Connection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (8,660 samples, 29.21%)</title><rect x="1.3760%" y="549" width="29.2064%" height="15" fill="rgb(222,148,37)"/><text x="1.6260%" y="559.50">&lt;hyper::server::conn::Connection&lt;I,S,E&gt; as core..</text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (8,660 samples, 29.21%)</title><rect x="1.3760%" y="533" width="29.2064%" height="15" fill="rgb(234,67,33)"/><text x="1.6260%" y="543.50">&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as c..</text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (8,660 samples, 29.21%)</title><rect x="1.3760%" y="517" width="29.2064%" height="15" fill="rgb(247,98,35)"/><text x="1.6260%" y="527.50">&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (8,660 samples, 29.21%)</title><rect x="1.3760%" y="501" width="29.2064%" height="15" fill="rgb(247,138,52)"/><text x="1.6260%" y="511.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (8,660 samples, 29.21%)</title><rect x="1.3760%" y="485" width="29.2064%" height="15" fill="rgb(213,79,30)"/><text x="1.6260%" y="495.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (8,660 samples, 29.21%)</title><rect x="1.3760%" y="469" width="29.2064%" height="15" fill="rgb(246,177,23)"/><text x="1.6260%" y="479.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (8,660 samples, 29.21%)</title><rect x="1.3760%" y="453" width="29.2064%" height="15" fill="rgb(230,62,27)"/><text x="1.6260%" y="463.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (8,660 samples, 29.21%)</title><rect x="1.3760%" y="437" width="29.2064%" height="15" fill="rgb(216,154,8)"/><text x="1.6260%" y="447.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (8,660 samples, 29.21%)</title><rect x="1.3760%" y="421" width="29.2064%" height="15" fill="rgb(244,35,45)"/><text x="1.6260%" y="431.50">hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (8,660 samples, 29.21%)</title><rect x="1.3760%" y="405" width="29.2064%" height="15" fill="rgb(251,115,12)"/><text x="1.6260%" y="415.50">hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (8,660 samples, 29.21%)</title><rect x="1.3760%" y="389" width="29.2064%" height="15" fill="rgb(240,54,50)"/><text x="1.6260%" y="399.50">hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_..</text></g><g><title>&lt;smoller_http::compat::HyperStream as tokio::io::async_read::AsyncRead&gt;::poll_read (8,660 samples, 29.21%)</title><rect x="1.3760%" y="373" width="29.2064%" height="15" fill="rgb(233,84,52)"/><text x="1.6260%" y="383.50">&lt;smoller_http::compat::HyperStream as tokio::io..</text></g><g><title>&lt;smoller::net::TcpStream as futures_io::if_std::AsyncRead&gt;::poll_read (8,660 samples, 29.21%)</title><rect x="1.3760%" y="357" width="29.2064%" height="15" fill="rgb(207,117,47)"/><text x="1.6260%" y="367.50">&lt;smoller::net::TcpStream as futures_io::if_std:..</text></g><g><title>std::net::udp::UdpSocket::recv (8,621 samples, 29.07%)</title><rect x="1.5075%" y="341" width="29.0749%" height="15" fill="rgb(249,43,39)"/><text x="1.7575%" y="351.50">std::net::udp::UdpSocket::recv</text></g><g><title>std::sys_common::net::UdpSocket::recv (8,439 samples, 28.46%)</title><rect x="2.1213%" y="325" width="28.4611%" height="15" fill="rgb(209,38,44)"/><text x="2.3713%" y="335.50">std::sys_common::net::UdpSocket::recv</text></g><g><title>std::sys::unix::net::Socket::read (8,439 samples, 28.46%)</title><rect x="2.1213%" y="309" width="28.4611%" height="15" fill="rgb(236,212,23)"/><text x="2.3713%" y="319.50">std::sys::unix::net::Socket::read</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (8,439 samples, 28.46%)</title><rect x="2.1213%" y="293" width="28.4611%" height="15" fill="rgb(242,79,21)"/><text x="2.3713%" y="303.50">std::sys::unix::net::Socket::recv_with_flags</text></g><g><title>std::sys::unix::cvt (5 samples, 0.02%)</title><rect x="30.5656%" y="277" width="0.0169%" height="15" fill="rgb(211,96,35)"/><text x="30.8156%" y="287.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (4 samples, 0.01%)</title><rect x="30.5690%" y="261" width="0.0135%" height="15" fill="rgb(253,215,40)"/><text x="30.8190%" y="271.50"></text></g><g><title>bytes::bytes_mut::BytesMut::freeze (3 samples, 0.01%)</title><rect x="30.6162%" y="869" width="0.0101%" height="15" fill="rgb(211,81,21)"/><text x="30.8662%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (4 samples, 0.01%)</title><rect x="30.6330%" y="869" width="0.0135%" height="15" fill="rgb(208,190,38)"/><text x="30.8830%" y="879.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (12 samples, 0.04%)</title><rect x="30.6465%" y="821" width="0.0405%" height="15" fill="rgb(235,213,38)"/><text x="30.8965%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9 samples, 0.03%)</title><rect x="30.6566%" y="805" width="0.0304%" height="15" fill="rgb(237,122,38)"/><text x="30.9066%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.03%)</title><rect x="30.6566%" y="789" width="0.0304%" height="15" fill="rgb(244,218,35)"/><text x="30.9066%" y="799.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.03%)</title><rect x="30.6566%" y="773" width="0.0304%" height="15" fill="rgb(240,68,47)"/><text x="30.9066%" y="783.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.03%)</title><rect x="30.6566%" y="757" width="0.0304%" height="15" fill="rgb(210,16,53)"/><text x="30.9066%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.03%)</title><rect x="30.6566%" y="741" width="0.0304%" height="15" fill="rgb(235,124,12)"/><text x="30.9066%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.03%)</title><rect x="30.6566%" y="725" width="0.0304%" height="15" fill="rgb(224,169,11)"/><text x="30.9066%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.03%)</title><rect x="30.6566%" y="709" width="0.0304%" height="15" fill="rgb(250,166,2)"/><text x="30.9066%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.03%)</title><rect x="30.6566%" y="693" width="0.0304%" height="15" fill="rgb(242,216,29)"/><text x="30.9066%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.03%)</title><rect x="30.6566%" y="677" width="0.0304%" height="15" fill="rgb(230,116,27)"/><text x="30.9066%" y="687.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.03%)</title><rect x="30.6566%" y="661" width="0.0304%" height="15" fill="rgb(228,99,48)"/><text x="30.9066%" y="671.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.03%)</title><rect x="30.6566%" y="645" width="0.0304%" height="15" fill="rgb(253,11,6)"/><text x="30.9066%" y="655.50"></text></g><g><title>__GI___libc_free (9 samples, 0.03%)</title><rect x="30.6937%" y="773" width="0.0304%" height="15" fill="rgb(247,143,39)"/><text x="30.9437%" y="783.50"></text></g><g><title>_int_free (4 samples, 0.01%)</title><rect x="30.7106%" y="757" width="0.0135%" height="15" fill="rgb(236,97,10)"/><text x="30.9606%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (12 samples, 0.04%)</title><rect x="30.6937%" y="805" width="0.0405%" height="15" fill="rgb(233,208,19)"/><text x="30.9437%" y="815.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (12 samples, 0.04%)</title><rect x="30.6937%" y="789" width="0.0405%" height="15" fill="rgb(216,164,2)"/><text x="30.9437%" y="799.50"></text></g><g><title>bytes::bytes::promotable_even_drop (3 samples, 0.01%)</title><rect x="30.7241%" y="773" width="0.0101%" height="15" fill="rgb(220,129,5)"/><text x="30.9741%" y="783.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (3 samples, 0.01%)</title><rect x="30.7241%" y="757" width="0.0101%" height="15" fill="rgb(242,17,10)"/><text x="30.9741%" y="767.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (27 samples, 0.09%)</title><rect x="30.6465%" y="869" width="0.0911%" height="15" fill="rgb(242,107,0)"/><text x="30.8965%" y="879.50"></text></g><g><title>&lt;http::uri::Uri as core::str::traits::FromStr&gt;::from_str (27 samples, 0.09%)</title><rect x="30.6465%" y="853" width="0.0911%" height="15" fill="rgb(251,28,31)"/><text x="30.8965%" y="863.50"></text></g><g><title>&lt;http::uri::Uri as core::convert::TryFrom&lt;&amp;[u8]&gt;&gt;::try_from (27 samples, 0.09%)</title><rect x="30.6465%" y="837" width="0.0911%" height="15" fill="rgb(233,223,10)"/><text x="30.8965%" y="847.50"></text></g><g><title>http::uri::Uri::from_shared (15 samples, 0.05%)</title><rect x="30.6870%" y="821" width="0.0506%" height="15" fill="rgb(215,21,27)"/><text x="30.9370%" y="831.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::append (6 samples, 0.02%)</title><rect x="30.7376%" y="869" width="0.0202%" height="15" fill="rgb(232,23,21)"/><text x="30.9876%" y="879.50"></text></g><g><title>&lt;http::header::name::HeaderName as http::header::map::into_header_name::Sealed&gt;::append (6 samples, 0.02%)</title><rect x="30.7376%" y="853" width="0.0202%" height="15" fill="rgb(244,5,23)"/><text x="30.9876%" y="863.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::append2 (5 samples, 0.02%)</title><rect x="30.7410%" y="837" width="0.0169%" height="15" fill="rgb(226,81,46)"/><text x="30.9910%" y="847.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::reserve (6 samples, 0.02%)</title><rect x="30.7578%" y="869" width="0.0202%" height="15" fill="rgb(247,70,30)"/><text x="31.0078%" y="879.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (8 samples, 0.03%)</title><rect x="30.7781%" y="869" width="0.0270%" height="15" fill="rgb(212,68,19)"/><text x="31.0281%" y="879.50"></text></g><g><title>http::header::name::parse_hdr (6 samples, 0.02%)</title><rect x="30.7848%" y="853" width="0.0202%" height="15" fill="rgb(240,187,13)"/><text x="31.0348%" y="863.50"></text></g><g><title>http::method::Method::from_bytes (6 samples, 0.02%)</title><rect x="30.8050%" y="869" width="0.0202%" height="15" fill="rgb(223,113,26)"/><text x="31.0550%" y="879.50"></text></g><g><title>&lt;httparse::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="30.9096%" y="837" width="0.0135%" height="15" fill="rgb(206,192,2)"/><text x="31.1596%" y="847.50"></text></g><g><title>httparse::parse_headers_iter_uninit (22 samples, 0.07%)</title><rect x="30.8691%" y="853" width="0.0742%" height="15" fill="rgb(241,108,4)"/><text x="31.1191%" y="863.50"></text></g><g><title>httparse::simd::runtime::match_header_value_vectored (4 samples, 0.01%)</title><rect x="30.9298%" y="837" width="0.0135%" height="15" fill="rgb(247,173,49)"/><text x="31.1798%" y="847.50"></text></g><g><title>httparse::simd::avx2::parse_uri_batch_32 (9 samples, 0.03%)</title><rect x="30.9669%" y="821" width="0.0304%" height="15" fill="rgb(224,114,35)"/><text x="31.2169%" y="831.50"></text></g><g><title>httparse::simd::avx2::match_url_char_32_avx (9 samples, 0.03%)</title><rect x="30.9669%" y="805" width="0.0304%" height="15" fill="rgb(245,159,27)"/><text x="31.2169%" y="815.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (8 samples, 0.03%)</title><rect x="30.9703%" y="789" width="0.0270%" height="15" fill="rgb(245,172,44)"/><text x="31.2203%" y="799.50"></text></g><g><title>httparse::parse_uri (19 samples, 0.06%)</title><rect x="30.9501%" y="853" width="0.0641%" height="15" fill="rgb(236,23,11)"/><text x="31.2001%" y="863.50"></text></g><g><title>httparse::simd::runtime::match_uri_vectored (16 samples, 0.05%)</title><rect x="30.9602%" y="837" width="0.0540%" height="15" fill="rgb(205,117,38)"/><text x="31.2102%" y="847.50"></text></g><g><title>httparse::simd::runtime::detect (5 samples, 0.02%)</title><rect x="30.9973%" y="821" width="0.0169%" height="15" fill="rgb(237,72,25)"/><text x="31.2473%" y="831.50"></text></g><g><title>httparse::parse_version (5 samples, 0.02%)</title><rect x="31.0141%" y="853" width="0.0169%" height="15" fill="rgb(244,70,9)"/><text x="31.2641%" y="863.50"></text></g><g><title>httparse::Request::parse_with_uninit_headers (62 samples, 0.21%)</title><rect x="30.8253%" y="869" width="0.2091%" height="15" fill="rgb(217,125,39)"/><text x="31.0753%" y="879.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (137 samples, 0.46%)</title><rect x="30.5824%" y="917" width="0.4620%" height="15" fill="rgb(235,36,10)"/><text x="30.8324%" y="927.50"></text></g><g><title>hyper::proto::h1::role::parse_headers (137 samples, 0.46%)</title><rect x="30.5824%" y="901" width="0.4620%" height="15" fill="rgb(251,123,47)"/><text x="30.8324%" y="911.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::parse (137 samples, 0.46%)</title><rect x="30.5824%" y="885" width="0.4620%" height="15" fill="rgb(221,13,13)"/><text x="30.8324%" y="895.50"></text></g><g><title>hyper::proto::h1::role::record_header_indices (3 samples, 0.01%)</title><rect x="31.0344%" y="869" width="0.0101%" height="15" fill="rgb(238,131,9)"/><text x="31.2844%" y="879.50"></text></g><g><title>std::net::udp::UdpSocket::send (323 samples, 1.09%)</title><rect x="31.0445%" y="917" width="1.0893%" height="15" fill="rgb(211,50,8)"/><text x="31.2945%" y="927.50"></text></g><g><title>std::sys_common::net::UdpSocket::send (323 samples, 1.09%)</title><rect x="31.0445%" y="901" width="1.0893%" height="15" fill="rgb(245,182,24)"/><text x="31.2945%" y="911.50"></text></g><g><title>__libc_send (323 samples, 1.09%)</title><rect x="31.0445%" y="885" width="1.0893%" height="15" fill="rgb(242,14,37)"/><text x="31.2945%" y="895.50"></text></g><g><title>[unknown] (323 samples, 1.09%)</title><rect x="31.0445%" y="869" width="1.0893%" height="15" fill="rgb(246,228,12)"/><text x="31.2945%" y="879.50"></text></g><g><title>[unknown] (9,284 samples, 31.31%)</title><rect x="0.8297%" y="933" width="31.3109%" height="15" fill="rgb(213,55,15)"/><text x="1.0797%" y="943.50">[unknown]</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5 samples, 0.02%)</title><rect x="32.1574%" y="597" width="0.0169%" height="15" fill="rgb(209,9,3)"/><text x="32.4074%" y="607.50"></text></g><g><title>smoller::runtime::Runtime::block_on::{{closure}} (5 samples, 0.02%)</title><rect x="32.1574%" y="581" width="0.0169%" height="15" fill="rgb(230,59,30)"/><text x="32.4074%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5 samples, 0.02%)</title><rect x="32.1574%" y="565" width="0.0169%" height="15" fill="rgb(209,121,21)"/><text x="32.4074%" y="575.50"></text></g><g><title>smoller_http::main::{{closure}} (5 samples, 0.02%)</title><rect x="32.1574%" y="549" width="0.0169%" height="15" fill="rgb(220,109,13)"/><text x="32.4074%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5 samples, 0.02%)</title><rect x="32.1574%" y="533" width="0.0169%" height="15" fill="rgb(232,18,1)"/><text x="32.4074%" y="543.50"></text></g><g><title>smoller::net::TcpListener::accept::{{closure}} (5 samples, 0.02%)</title><rect x="32.1574%" y="517" width="0.0169%" height="15" fill="rgb(215,41,42)"/><text x="32.4074%" y="527.50"></text></g><g><title>std::net::tcp::TcpListener::accept (3 samples, 0.01%)</title><rect x="32.1642%" y="501" width="0.0101%" height="15" fill="rgb(224,123,36)"/><text x="32.4142%" y="511.50"></text></g><g><title>std::sys_common::net::TcpListener::accept (3 samples, 0.01%)</title><rect x="32.1642%" y="485" width="0.0101%" height="15" fill="rgb(240,125,3)"/><text x="32.4142%" y="495.50"></text></g><g><title>std::sys::unix::net::Socket::accept (3 samples, 0.01%)</title><rect x="32.1642%" y="469" width="0.0101%" height="15" fill="rgb(205,98,50)"/><text x="32.4142%" y="479.50"></text></g><g><title>std::sys::unix::cvt_r (3 samples, 0.01%)</title><rect x="32.1642%" y="453" width="0.0101%" height="15" fill="rgb(205,185,37)"/><text x="32.4142%" y="463.50"></text></g><g><title>std::sys::unix::net::Socket::accept::{{closure}} (3 samples, 0.01%)</title><rect x="32.1642%" y="437" width="0.0101%" height="15" fill="rgb(238,207,15)"/><text x="32.4142%" y="447.50"></text></g><g><title>accept4 (3 samples, 0.01%)</title><rect x="32.1642%" y="421" width="0.0101%" height="15" fill="rgb(213,199,42)"/><text x="32.4142%" y="431.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="32.1642%" y="405" width="0.0101%" height="15" fill="rgb(235,201,11)"/><text x="32.4142%" y="415.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="32.1642%" y="389" width="0.0101%" height="15" fill="rgb(207,46,11)"/><text x="32.4142%" y="399.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="32.1642%" y="373" width="0.0101%" height="15" fill="rgb(241,35,35)"/><text x="32.4142%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="32.1642%" y="357" width="0.0101%" height="15" fill="rgb(243,32,47)"/><text x="32.4142%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="32.1642%" y="341" width="0.0101%" height="15" fill="rgb(247,202,23)"/><text x="32.4142%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="32.1642%" y="325" width="0.0101%" height="15" fill="rgb(219,102,11)"/><text x="32.4142%" y="335.50"></text></g><g><title>core::cmp::PartialOrd::gt (3 samples, 0.01%)</title><rect x="32.2316%" y="373" width="0.0101%" height="15" fill="rgb(243,110,44)"/><text x="32.4816%" y="383.50"></text></g><g><title>&lt;std::time::SystemTime as core::cmp::PartialOrd&gt;::partial_cmp (3 samples, 0.01%)</title><rect x="32.2316%" y="357" width="0.0101%" height="15" fill="rgb(222,74,54)"/><text x="32.4816%" y="367.50"></text></g><g><title>&lt;std::sys::unix::time::inner::SystemTime as core::cmp::PartialOrd&gt;::partial_cmp (3 samples, 0.01%)</title><rect x="32.2316%" y="341" width="0.0101%" height="15" fill="rgb(216,99,12)"/><text x="32.4816%" y="351.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (3 samples, 0.01%)</title><rect x="32.2316%" y="325" width="0.0101%" height="15" fill="rgb(226,22,26)"/><text x="32.4816%" y="335.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (3 samples, 0.01%)</title><rect x="32.2316%" y="309" width="0.0101%" height="15" fill="rgb(217,163,10)"/><text x="32.4816%" y="319.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::update_date (22 samples, 0.07%)</title><rect x="32.2215%" y="469" width="0.0742%" height="15" fill="rgb(213,25,53)"/><text x="32.4715%" y="479.50"></text></g><g><title>hyper::common::date::update (22 samples, 0.07%)</title><rect x="32.2215%" y="453" width="0.0742%" height="15" fill="rgb(252,105,26)"/><text x="32.4715%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (22 samples, 0.07%)</title><rect x="32.2215%" y="437" width="0.0742%" height="15" fill="rgb(220,39,43)"/><text x="32.4715%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (22 samples, 0.07%)</title><rect x="32.2215%" y="421" width="0.0742%" height="15" fill="rgb(229,68,48)"/><text x="32.4715%" y="431.50"></text></g><g><title>hyper::common::date::update::{{closure}} (21 samples, 0.07%)</title><rect x="32.2249%" y="405" width="0.0708%" height="15" fill="rgb(252,8,32)"/><text x="32.4749%" y="415.50"></text></g><g><title>hyper::common::date::CachedDate::check (21 samples, 0.07%)</title><rect x="32.2249%" y="389" width="0.0708%" height="15" fill="rgb(223,20,43)"/><text x="32.4749%" y="399.50"></text></g><g><title>std::time::SystemTime::now (16 samples, 0.05%)</title><rect x="32.2417%" y="373" width="0.0540%" height="15" fill="rgb(229,81,49)"/><text x="32.4917%" y="383.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (16 samples, 0.05%)</title><rect x="32.2417%" y="357" width="0.0540%" height="15" fill="rgb(236,28,36)"/><text x="32.4917%" y="367.50"></text></g><g><title>std::sys::unix::time::inner::now (16 samples, 0.05%)</title><rect x="32.2417%" y="341" width="0.0540%" height="15" fill="rgb(249,185,26)"/><text x="32.4917%" y="351.50"></text></g><g><title>__clock_gettime_2 (15 samples, 0.05%)</title><rect x="32.2451%" y="325" width="0.0506%" height="15" fill="rgb(249,174,33)"/><text x="32.4951%" y="335.50"></text></g><g><title>__vdso_clock_gettime (9 samples, 0.03%)</title><rect x="32.2654%" y="309" width="0.0304%" height="15" fill="rgb(233,201,37)"/><text x="32.5154%" y="319.50"></text></g><g><title>[[vdso]] (5 samples, 0.02%)</title><rect x="32.2788%" y="293" width="0.0169%" height="15" fill="rgb(221,78,26)"/><text x="32.5288%" y="303.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (7 samples, 0.02%)</title><rect x="32.2957%" y="469" width="0.0236%" height="15" fill="rgb(250,127,30)"/><text x="32.5457%" y="479.50"></text></g><g><title>&lt;hyper::common::buf::BufList&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (13 samples, 0.04%)</title><rect x="32.4137%" y="389" width="0.0438%" height="15" fill="rgb(230,49,44)"/><text x="32.6637%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (13 samples, 0.04%)</title><rect x="32.4137%" y="373" width="0.0438%" height="15" fill="rgb(229,67,23)"/><text x="32.6637%" y="383.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (13 samples, 0.04%)</title><rect x="32.4137%" y="357" width="0.0438%" height="15" fill="rgb(249,83,47)"/><text x="32.6637%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.03%)</title><rect x="32.4272%" y="341" width="0.0304%" height="15" fill="rgb(215,43,3)"/><text x="32.6772%" y="351.50"></text></g><g><title>&lt;hyper::proto::h1::io::WriteBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (14 samples, 0.05%)</title><rect x="32.4137%" y="405" width="0.0472%" height="15" fill="rgb(238,154,13)"/><text x="32.6637%" y="415.50"></text></g><g><title>&lt;hyper::proto::h1::io::Cursor&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::chunk (6 samples, 0.02%)</title><rect x="32.4711%" y="389" width="0.0202%" height="15" fill="rgb(219,56,2)"/><text x="32.7211%" y="399.50"></text></g><g><title>__libc_send (4,974 samples, 16.78%)</title><rect x="32.5520%" y="325" width="16.7752%" height="15" fill="rgb(233,0,4)"/><text x="32.8020%" y="335.50">__libc_send</text></g><g><title>[unknown] (4,971 samples, 16.77%)</title><rect x="32.5621%" y="309" width="16.7650%" height="15" fill="rgb(235,30,7)"/><text x="32.8121%" y="319.50">[unknown]</text></g><g><title>[unknown] (4,969 samples, 16.76%)</title><rect x="32.5689%" y="293" width="16.7583%" height="15" fill="rgb(250,79,13)"/><text x="32.8189%" y="303.50">[unknown]</text></g><g><title>[unknown] (4,967 samples, 16.75%)</title><rect x="32.5756%" y="277" width="16.7515%" height="15" fill="rgb(211,146,34)"/><text x="32.8256%" y="287.50">[unknown]</text></g><g><title>[unknown] (4,942 samples, 16.67%)</title><rect x="32.6599%" y="261" width="16.6672%" height="15" fill="rgb(228,22,38)"/><text x="32.9099%" y="271.50">[unknown]</text></g><g><title>[unknown] (4,899 samples, 16.52%)</title><rect x="32.8050%" y="245" width="16.5222%" height="15" fill="rgb(235,168,5)"/><text x="33.0550%" y="255.50">[unknown]</text></g><g><title>[unknown] (4,889 samples, 16.49%)</title><rect x="32.8387%" y="229" width="16.4885%" height="15" fill="rgb(221,155,16)"/><text x="33.0887%" y="239.50">[unknown]</text></g><g><title>[unknown] (4,863 samples, 16.40%)</title><rect x="32.9264%" y="213" width="16.4008%" height="15" fill="rgb(215,215,53)"/><text x="33.1764%" y="223.50">[unknown]</text></g><g><title>[unknown] (4,527 samples, 15.27%)</title><rect x="34.0596%" y="197" width="15.2676%" height="15" fill="rgb(223,4,10)"/><text x="34.3096%" y="207.50">[unknown]</text></g><g><title>[unknown] (4,200 samples, 14.16%)</title><rect x="35.1624%" y="181" width="14.1648%" height="15" fill="rgb(234,103,6)"/><text x="35.4124%" y="191.50">[unknown]</text></g><g><title>[unknown] (3,512 samples, 11.84%)</title><rect x="37.4827%" y="165" width="11.8445%" height="15" fill="rgb(227,97,0)"/><text x="37.7327%" y="175.50">[unknown]</text></g><g><title>[unknown] (1,972 samples, 6.65%)</title><rect x="42.6765%" y="149" width="6.6507%" height="15" fill="rgb(234,150,53)"/><text x="42.9265%" y="159.50">[unknown]</text></g><g><title>[unknown] (204 samples, 0.69%)</title><rect x="48.6392%" y="133" width="0.6880%" height="15" fill="rgb(228,201,54)"/><text x="48.8892%" y="143.50"></text></g><g><title>[unknown] (97 samples, 0.33%)</title><rect x="49.0000%" y="117" width="0.3271%" height="15" fill="rgb(222,22,37)"/><text x="49.2500%" y="127.50"></text></g><g><title>[unknown] (83 samples, 0.28%)</title><rect x="49.0472%" y="101" width="0.2799%" height="15" fill="rgb(237,53,32)"/><text x="49.2972%" y="111.50"></text></g><g><title>[unknown] (61 samples, 0.21%)</title><rect x="49.1214%" y="85" width="0.2057%" height="15" fill="rgb(233,25,53)"/><text x="49.3714%" y="95.50"></text></g><g><title>[unknown] (47 samples, 0.16%)</title><rect x="49.1687%" y="69" width="0.1585%" height="15" fill="rgb(210,40,34)"/><text x="49.4187%" y="79.50"></text></g><g><title>&lt;smoller_http::compat::HyperStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (4,994 samples, 16.84%)</title><rect x="32.4913%" y="389" width="16.8426%" height="15" fill="rgb(241,220,44)"/><text x="32.7413%" y="399.50">&lt;smoller_http::compat::Hyp..</text></g><g><title>&lt;smoller::net::TcpStream as futures_io::if_std::AsyncWrite&gt;::poll_write (4,994 samples, 16.84%)</title><rect x="32.4913%" y="373" width="16.8426%" height="15" fill="rgb(235,28,35)"/><text x="32.7413%" y="383.50">&lt;smoller::net::TcpStream a..</text></g><g><title>std::net::udp::UdpSocket::send (4,985 samples, 16.81%)</title><rect x="32.5217%" y="357" width="16.8122%" height="15" fill="rgb(210,56,17)"/><text x="32.7717%" y="367.50">std::net::udp::UdpSocket::..</text></g><g><title>std::sys_common::net::UdpSocket::send (4,976 samples, 16.78%)</title><rect x="32.5520%" y="341" width="16.7819%" height="15" fill="rgb(224,130,29)"/><text x="32.8020%" y="351.50">std::sys_common::net::UdpS..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (5,045 samples, 17.01%)</title><rect x="32.3227%" y="453" width="17.0146%" height="15" fill="rgb(235,212,8)"/><text x="32.5727%" y="463.50">hyper::proto::h1::dispatch..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (5,042 samples, 17.00%)</title><rect x="32.3328%" y="437" width="17.0045%" height="15" fill="rgb(223,33,50)"/><text x="32.5828%" y="447.50">hyper::proto::h1::conn::Co..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (5,029 samples, 16.96%)</title><rect x="32.3766%" y="421" width="16.9606%" height="15" fill="rgb(219,149,13)"/><text x="32.6266%" y="431.50">hyper::proto::h1::io::Buff..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush_flattened (5,003 samples, 16.87%)</title><rect x="32.4643%" y="405" width="16.8730%" height="15" fill="rgb(250,156,29)"/><text x="32.7143%" y="415.50">hyper::proto::h1::io::Buff..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::is_read_closed (6 samples, 0.02%)</title><rect x="49.4857%" y="421" width="0.0202%" height="15" fill="rgb(216,193,19)"/><text x="49.7357%" y="431.50"></text></g><g><title>hyper::proto::h1::conn::State::is_read_closed (5 samples, 0.02%)</title><rect x="49.4891%" y="405" width="0.0169%" height="15" fill="rgb(216,135,14)"/><text x="49.7391%" y="415.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (4 samples, 0.01%)</title><rect x="49.7116%" y="373" width="0.0135%" height="15" fill="rgb(241,47,5)"/><text x="49.9616%" y="383.50"></text></g><g><title>&lt;std::io::error::ErrorKind as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="49.8836%" y="341" width="0.0101%" height="15" fill="rgb(233,42,35)"/><text x="50.1336%" y="351.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.02%)</title><rect x="49.9207%" y="325" width="0.0202%" height="15" fill="rgb(231,13,6)"/><text x="50.1707%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (53 samples, 0.18%)</title><rect x="50.3693%" y="293" width="0.1787%" height="15" fill="rgb(207,181,40)"/><text x="50.6193%" y="303.50"></text></g><g><title>smoller::runtime::core::Core::poll_ready::{{closure}}::{{closure}} (40 samples, 0.13%)</title><rect x="50.4131%" y="277" width="0.1349%" height="15" fill="rgb(254,173,49)"/><text x="50.6631%" y="287.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (83 samples, 0.28%)</title><rect x="50.5480%" y="293" width="0.2799%" height="15" fill="rgb(221,1,38)"/><text x="50.7980%" y="303.50"></text></g><g><title>smoller::runtime::core::RawTask&lt;F&gt;::clone_waker (41 samples, 0.14%)</title><rect x="50.6897%" y="277" width="0.1383%" height="15" fill="rgb(206,124,46)"/><text x="50.9397%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (9 samples, 0.03%)</title><rect x="50.8280%" y="293" width="0.0304%" height="15" fill="rgb(249,21,11)"/><text x="51.0780%" y="303.50"></text></g><g><title>core::mem::take (9 samples, 0.03%)</title><rect x="50.8280%" y="277" width="0.0304%" height="15" fill="rgb(222,201,40)"/><text x="51.0780%" y="287.50"></text></g><g><title>core::mem::replace (9 samples, 0.03%)</title><rect x="50.8280%" y="261" width="0.0304%" height="15" fill="rgb(235,61,29)"/><text x="51.0780%" y="271.50"></text></g><g><title>core::ptr::write (8 samples, 0.03%)</title><rect x="50.8313%" y="245" width="0.0270%" height="15" fill="rgb(219,207,3)"/><text x="51.0813%" y="255.50"></text></g><g><title>&lt;i32 as polling::Source&gt;::raw (17 samples, 0.06%)</title><rect x="51.0000%" y="261" width="0.0573%" height="15" fill="rgb(222,56,46)"/><text x="51.2500%" y="271.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::le (21 samples, 0.07%)</title><rect x="51.1315%" y="245" width="0.0708%" height="15" fill="rgb(239,76,54)"/><text x="51.3815%" y="255.50"></text></g><g><title>log::max_level (7 samples, 0.02%)</title><rect x="51.2023%" y="245" width="0.0236%" height="15" fill="rgb(231,124,27)"/><text x="51.4523%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (7 samples, 0.02%)</title><rect x="51.2023%" y="229" width="0.0236%" height="15" fill="rgb(249,195,6)"/><text x="51.4523%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (7 samples, 0.02%)</title><rect x="51.2023%" y="213" width="0.0236%" height="15" fill="rgb(237,174,47)"/><text x="51.4523%" y="223.50"></text></g><g><title>__GI_epoll_ctl (3,128 samples, 10.55%)</title><rect x="51.2866%" y="229" width="10.5494%" height="15" fill="rgb(206,201,31)"/><text x="51.5366%" y="239.50">__GI_epoll_ctl</text></g><g><title>[unknown] (3,099 samples, 10.45%)</title><rect x="51.3844%" y="213" width="10.4516%" height="15" fill="rgb(231,57,52)"/><text x="51.6344%" y="223.50">[unknown]</text></g><g><title>[unknown] (3,087 samples, 10.41%)</title><rect x="51.4249%" y="197" width="10.4111%" height="15" fill="rgb(248,177,22)"/><text x="51.6749%" y="207.50">[unknown]</text></g><g><title>[unknown] (3,041 samples, 10.26%)</title><rect x="51.5800%" y="181" width="10.2560%" height="15" fill="rgb(215,211,37)"/><text x="51.8300%" y="191.50">[unknown]</text></g><g><title>[unknown] (2,936 samples, 9.90%)</title><rect x="51.9342%" y="165" width="9.9019%" height="15" fill="rgb(241,128,51)"/><text x="52.1842%" y="175.50">[unknown]</text></g><g><title>[unknown] (1,752 samples, 5.91%)</title><rect x="55.9273%" y="149" width="5.9087%" height="15" fill="rgb(227,165,31)"/><text x="56.1773%" y="159.50">[unknown]</text></g><g><title>[unknown] (503 samples, 1.70%)</title><rect x="60.1396%" y="133" width="1.6964%" height="15" fill="rgb(228,167,24)"/><text x="60.3896%" y="143.50"></text></g><g><title>[unknown] (400 samples, 1.35%)</title><rect x="60.4870%" y="117" width="1.3490%" height="15" fill="rgb(228,143,12)"/><text x="60.7370%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="61.8158%" y="101" width="0.0202%" height="15" fill="rgb(249,149,8)"/><text x="62.0658%" y="111.50"></text></g><g><title>polling::Poller::modify (3,241 samples, 10.93%)</title><rect x="50.9629%" y="277" width="10.9305%" height="15" fill="rgb(243,35,44)"/><text x="51.2129%" y="287.50">polling::Poller:..</text></g><g><title>polling::epoll::Poller::modify (3,213 samples, 10.84%)</title><rect x="51.0573%" y="261" width="10.8361%" height="15" fill="rgb(246,89,9)"/><text x="51.3073%" y="271.50">polling::epoll::..</text></g><g><title>polling::epoll::Poller::ctl (3,163 samples, 10.67%)</title><rect x="51.2259%" y="245" width="10.6674%" height="15" fill="rgb(233,213,13)"/><text x="51.4759%" y="255.50">polling::epoll::..</text></g><g><title>core::option::Option&lt;T&gt;::map (15 samples, 0.05%)</title><rect x="61.8428%" y="229" width="0.0506%" height="15" fill="rgb(233,141,41)"/><text x="62.0928%" y="239.50"></text></g><g><title>polling::epoll::Poller::ctl::{{closure}} (8 samples, 0.03%)</title><rect x="61.8664%" y="213" width="0.0270%" height="15" fill="rgb(239,167,4)"/><text x="62.1164%" y="223.50"></text></g><g><title>smoller::runtime::core::Core::modify_source (3,274 samples, 11.04%)</title><rect x="50.8684%" y="293" width="11.0418%" height="15" fill="rgb(209,217,16)"/><text x="51.1184%" y="303.50">smoller::runtime..</text></g><g><title>smoller::runtime::core::Interest::has_interest (5 samples, 0.02%)</title><rect x="61.8934%" y="277" width="0.0169%" height="15" fill="rgb(219,88,35)"/><text x="62.1434%" y="287.50"></text></g><g><title>smoller::runtime::core::Interest::wakers (4 samples, 0.01%)</title><rect x="61.8967%" y="261" width="0.0135%" height="15" fill="rgb(220,193,23)"/><text x="62.1467%" y="271.50"></text></g><g><title>smoller::runtime::core::Interest::wakers (54 samples, 0.18%)</title><rect x="61.9136%" y="277" width="0.1821%" height="15" fill="rgb(230,90,52)"/><text x="62.1636%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (50 samples, 0.17%)</title><rect x="61.9271%" y="261" width="0.1686%" height="15" fill="rgb(252,106,19)"/><text x="62.1771%" y="271.50"></text></g><g><title>smoller::runtime::core::Interest::has_interest (57 samples, 0.19%)</title><rect x="61.9102%" y="293" width="0.1922%" height="15" fill="rgb(206,74,20)"/><text x="62.1602%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.11%)</title><rect x="63.2289%" y="213" width="0.1147%" height="15" fill="rgb(230,138,44)"/><text x="63.4789%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.11%)</title><rect x="63.2289%" y="197" width="0.1147%" height="15" fill="rgb(235,182,43)"/><text x="63.4789%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.11%)</title><rect x="63.2289%" y="181" width="0.1147%" height="15" fill="rgb(242,16,51)"/><text x="63.4789%" y="191.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (24 samples, 0.08%)</title><rect x="63.2626%" y="165" width="0.0809%" height="15" fill="rgb(248,9,4)"/><text x="63.5126%" y="175.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (17 samples, 0.06%)</title><rect x="63.3436%" y="213" width="0.0573%" height="15" fill="rgb(210,31,22)"/><text x="63.5936%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (17 samples, 0.06%)</title><rect x="63.3436%" y="197" width="0.0573%" height="15" fill="rgb(239,54,39)"/><text x="63.5936%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (5 samples, 0.02%)</title><rect x="63.4245%" y="165" width="0.0169%" height="15" fill="rgb(230,99,41)"/><text x="63.6745%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (3 samples, 0.01%)</title><rect x="63.4414%" y="165" width="0.0101%" height="15" fill="rgb(253,106,12)"/><text x="63.6914%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3 samples, 0.01%)</title><rect x="63.4414%" y="149" width="0.0101%" height="15" fill="rgb(213,46,41)"/><text x="63.6914%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="63.4414%" y="133" width="0.0101%" height="15" fill="rgb(215,133,35)"/><text x="63.6914%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (507 samples, 1.71%)</title><rect x="62.1025%" y="229" width="1.7099%" height="15" fill="rgb(213,28,5)"/><text x="62.3525%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (122 samples, 0.41%)</title><rect x="63.4009%" y="213" width="0.4115%" height="15" fill="rgb(215,77,49)"/><text x="63.6509%" y="223.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (122 samples, 0.41%)</title><rect x="63.4009%" y="197" width="0.4115%" height="15" fill="rgb(248,100,22)"/><text x="63.6509%" y="207.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (122 samples, 0.41%)</title><rect x="63.4009%" y="181" width="0.4115%" height="15" fill="rgb(208,67,9)"/><text x="63.6509%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (107 samples, 0.36%)</title><rect x="63.4515%" y="165" width="0.3609%" height="15" fill="rgb(219,133,21)"/><text x="63.7015%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (107 samples, 0.36%)</title><rect x="63.4515%" y="149" width="0.3609%" height="15" fill="rgb(246,46,29)"/><text x="63.7015%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (107 samples, 0.36%)</title><rect x="63.4515%" y="133" width="0.3609%" height="15" fill="rgb(246,185,52)"/><text x="63.7015%" y="143.50"></text></g><g><title>core::core_arch::simd::i8x16::new (107 samples, 0.36%)</title><rect x="63.4515%" y="117" width="0.3609%" height="15" fill="rgb(252,136,11)"/><text x="63.7015%" y="127.50"></text></g><g><title>smoller::runtime::core::Core::poll_ready::{{closure}} (4,103 samples, 13.84%)</title><rect x="50.0556%" y="309" width="13.8376%" height="15" fill="rgb(219,138,53)"/><text x="50.3056%" y="319.50">smoller::runtime::cor..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (531 samples, 1.79%)</title><rect x="62.1025%" y="293" width="1.7908%" height="15" fill="rgb(211,51,23)"/><text x="62.3525%" y="303.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (531 samples, 1.79%)</title><rect x="62.1025%" y="277" width="1.7908%" height="15" fill="rgb(247,221,28)"/><text x="62.3525%" y="287.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (531 samples, 1.79%)</title><rect x="62.1025%" y="261" width="1.7908%" height="15" fill="rgb(251,222,45)"/><text x="62.3525%" y="271.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (531 samples, 1.79%)</title><rect x="62.1025%" y="245" width="1.7908%" height="15" fill="rgb(217,162,53)"/><text x="62.3525%" y="255.50">h..</text></g><g><title>smoller::util::LocalCell&lt;T&gt;::with (24 samples, 0.08%)</title><rect x="63.8124%" y="229" width="0.0809%" height="15" fill="rgb(229,93,14)"/><text x="64.0624%" y="239.50"></text></g><g><title>smoller::runtime::core::Core::poll_ready (4,154 samples, 14.01%)</title><rect x="49.8938%" y="341" width="14.0096%" height="15" fill="rgb(209,67,49)"/><text x="50.1438%" y="351.50">smoller::runtime::cor..</text></g><g><title>smoller::util::LocalCell&lt;T&gt;::with (4,140 samples, 13.96%)</title><rect x="49.9410%" y="325" width="13.9624%" height="15" fill="rgb(213,87,29)"/><text x="50.1910%" y="335.50">smoller::util::LocalC..</text></g><g><title>smoller::util::LocalCell&lt;T&gt;::with (3 samples, 0.01%)</title><rect x="63.8933%" y="309" width="0.0101%" height="15" fill="rgb(205,151,52)"/><text x="64.1433%" y="319.50"></text></g><g><title>std::io::error::Error::kind (240 samples, 0.81%)</title><rect x="63.9034%" y="341" width="0.8094%" height="15" fill="rgb(253,215,39)"/><text x="64.1534%" y="351.50"></text></g><g><title>std::sys::unix::decode_error_kind (127 samples, 0.43%)</title><rect x="64.2845%" y="325" width="0.4283%" height="15" fill="rgb(221,220,41)"/><text x="64.5345%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,F&gt; as core::ops::try_trait::FromResidual&lt;core::result::Result&lt;core::convert::Infallible,E&gt;&gt;&gt;::from_residual (6 samples, 0.02%)</title><rect x="64.7702%" y="277" width="0.0202%" height="15" fill="rgb(218,133,21)"/><text x="65.0202%" y="287.50"></text></g><g><title>__libc_recv (3,485 samples, 11.75%)</title><rect x="64.7904%" y="277" width="11.7534%" height="15" fill="rgb(221,193,43)"/><text x="65.0404%" y="287.50">__libc_recv</text></g><g><title>[unknown] (3,240 samples, 10.93%)</title><rect x="65.6167%" y="261" width="10.9271%" height="15" fill="rgb(240,128,52)"/><text x="65.8667%" y="271.50">[unknown]</text></g><g><title>[unknown] (3,012 samples, 10.16%)</title><rect x="66.3856%" y="245" width="10.1582%" height="15" fill="rgb(253,114,12)"/><text x="66.6356%" y="255.50">[unknown]</text></g><g><title>[unknown] (2,977 samples, 10.04%)</title><rect x="66.5037%" y="229" width="10.0401%" height="15" fill="rgb(215,223,47)"/><text x="66.7537%" y="239.50">[unknown]</text></g><g><title>[unknown] (2,735 samples, 9.22%)</title><rect x="67.3198%" y="213" width="9.2240%" height="15" fill="rgb(248,225,23)"/><text x="67.5698%" y="223.50">[unknown]</text></g><g><title>[unknown] (1,886 samples, 6.36%)</title><rect x="70.1831%" y="197" width="6.3607%" height="15" fill="rgb(250,108,0)"/><text x="70.4331%" y="207.50">[unknown]</text></g><g><title>[unknown] (1,574 samples, 5.31%)</title><rect x="71.2354%" y="181" width="5.3084%" height="15" fill="rgb(228,208,7)"/><text x="71.4854%" y="191.50">[unkno..</text></g><g><title>[unknown] (964 samples, 3.25%)</title><rect x="73.2926%" y="165" width="3.2512%" height="15" fill="rgb(244,45,10)"/><text x="73.5426%" y="175.50">[un..</text></g><g><title>[unknown] (335 samples, 1.13%)</title><rect x="75.4140%" y="149" width="1.1298%" height="15" fill="rgb(207,125,25)"/><text x="75.6640%" y="159.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (13 samples, 0.04%)</title><rect x="76.5472%" y="261" width="0.0438%" height="15" fill="rgb(210,195,18)"/><text x="76.7972%" y="271.50"></text></g><g><title>std::io::error::Error::from_raw_os_error (9 samples, 0.03%)</title><rect x="76.5910%" y="245" width="0.0304%" height="15" fill="rgb(249,80,12)"/><text x="76.8410%" y="255.50"></text></g><g><title>&lt;smoller::net::TcpStream as futures_io::if_std::AsyncRead&gt;::poll_read (7,997 samples, 26.97%)</title><rect x="49.7690%" y="357" width="26.9704%" height="15" fill="rgb(221,65,9)"/><text x="50.0190%" y="367.50">&lt;smoller::net::TcpStream as futures_io::if_..</text></g><g><title>std::net::udp::UdpSocket::recv (3,566 samples, 12.03%)</title><rect x="64.7128%" y="341" width="12.0266%" height="15" fill="rgb(235,49,36)"/><text x="64.9628%" y="351.50">std::net::udp::Udp..</text></g><g><title>std::sys_common::net::UdpSocket::recv (3,549 samples, 11.97%)</title><rect x="64.7702%" y="325" width="11.9692%" height="15" fill="rgb(225,32,20)"/><text x="65.0202%" y="335.50">std::sys_common::n..</text></g><g><title>std::sys::unix::net::Socket::read (3,549 samples, 11.97%)</title><rect x="64.7702%" y="309" width="11.9692%" height="15" fill="rgb(215,141,46)"/><text x="65.0202%" y="319.50">std::sys::unix::ne..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (3,549 samples, 11.97%)</title><rect x="64.7702%" y="293" width="11.9692%" height="15" fill="rgb(250,160,47)"/><text x="65.0202%" y="303.50">std::sys::unix::ne..</text></g><g><title>std::sys::unix::cvt (58 samples, 0.20%)</title><rect x="76.5438%" y="277" width="0.1956%" height="15" fill="rgb(216,222,40)"/><text x="76.7938%" y="287.50"></text></g><g><title>std::io::error::Error::last_os_error (44 samples, 0.15%)</title><rect x="76.5910%" y="261" width="0.1484%" height="15" fill="rgb(234,217,39)"/><text x="76.8410%" y="271.50"></text></g><g><title>std::sys::unix::os::errno (35 samples, 0.12%)</title><rect x="76.6214%" y="245" width="0.1180%" height="15" fill="rgb(207,178,40)"/><text x="76.8714%" y="255.50"></text></g><g><title>__errno_location (16 samples, 0.05%)</title><rect x="76.6854%" y="229" width="0.0540%" height="15" fill="rgb(221,136,13)"/><text x="76.9354%" y="239.50"></text></g><g><title>core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt;::map_ok (4 samples, 0.01%)</title><rect x="76.7394%" y="357" width="0.0135%" height="15" fill="rgb(249,199,10)"/><text x="76.9894%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (203 samples, 0.68%)</title><rect x="76.7563%" y="325" width="0.6846%" height="15" fill="rgb(249,222,13)"/><text x="77.0063%" y="335.50"></text></g><g><title>core::intrinsics::write_bytes (202 samples, 0.68%)</title><rect x="76.7596%" y="309" width="0.6813%" height="15" fill="rgb(244,185,38)"/><text x="77.0096%" y="319.50"></text></g><g><title>__memset_avx2_unaligned_erms (200 samples, 0.67%)</title><rect x="76.7664%" y="293" width="0.6745%" height="15" fill="rgb(236,202,9)"/><text x="77.0164%" y="303.50"></text></g><g><title>&lt;smoller_http::compat::HyperStream as tokio::io::async_read::AsyncRead&gt;::poll_read (8,220 samples, 27.72%)</title><rect x="49.7251%" y="373" width="27.7225%" height="15" fill="rgb(250,229,37)"/><text x="49.9751%" y="383.50">&lt;smoller_http::compat::HyperStream as tokio:..</text></g><g><title>tokio::io::read_buf::ReadBuf::initialize_unfilled (206 samples, 0.69%)</title><rect x="76.7529%" y="357" width="0.6947%" height="15" fill="rgb(206,174,23)"/><text x="77.0029%" y="367.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::initialize_unfilled_to (206 samples, 0.69%)</title><rect x="76.7529%" y="341" width="0.6947%" height="15" fill="rgb(211,33,43)"/><text x="77.0029%" y="351.50"></text></g><g><title>__GI___libc_malloc (46 samples, 0.16%)</title><rect x="77.4949%" y="229" width="0.1551%" height="15" fill="rgb(245,58,50)"/><text x="77.7449%" y="239.50"></text></g><g><title>_int_malloc (42 samples, 0.14%)</title><rect x="77.5083%" y="213" width="0.1416%" height="15" fill="rgb(244,68,36)"/><text x="77.7583%" y="223.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (61 samples, 0.21%)</title><rect x="77.4476%" y="373" width="0.2057%" height="15" fill="rgb(232,229,15)"/><text x="77.6976%" y="383.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (61 samples, 0.21%)</title><rect x="77.4476%" y="357" width="0.2057%" height="15" fill="rgb(254,30,23)"/><text x="77.6976%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (47 samples, 0.16%)</title><rect x="77.4949%" y="341" width="0.1585%" height="15" fill="rgb(235,160,14)"/><text x="77.7449%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (47 samples, 0.16%)</title><rect x="77.4949%" y="325" width="0.1585%" height="15" fill="rgb(212,155,44)"/><text x="77.7449%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (47 samples, 0.16%)</title><rect x="77.4949%" y="309" width="0.1585%" height="15" fill="rgb(226,2,50)"/><text x="77.7449%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (47 samples, 0.16%)</title><rect x="77.4949%" y="293" width="0.1585%" height="15" fill="rgb(234,177,6)"/><text x="77.7449%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (47 samples, 0.16%)</title><rect x="77.4949%" y="277" width="0.1585%" height="15" fill="rgb(217,24,9)"/><text x="77.7449%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (47 samples, 0.16%)</title><rect x="77.4949%" y="261" width="0.1585%" height="15" fill="rgb(220,13,46)"/><text x="77.7449%" y="271.50"></text></g><g><title>alloc::alloc::alloc (47 samples, 0.16%)</title><rect x="77.4949%" y="245" width="0.1585%" height="15" fill="rgb(239,221,27)"/><text x="77.7449%" y="255.50"></text></g><g><title>hyper::proto::h1::io::ReadStrategy::next (7 samples, 0.02%)</title><rect x="77.6534%" y="373" width="0.0236%" height="15" fill="rgb(222,198,25)"/><text x="77.9034%" y="383.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::mid_message_detect_eof (8,354 samples, 28.17%)</title><rect x="49.5059%" y="421" width="28.1744%" height="15" fill="rgb(211,99,13)"/><text x="49.7559%" y="431.50">hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::mid_mess..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::force_io_read (8,347 samples, 28.15%)</title><rect x="49.5295%" y="405" width="28.1508%" height="15" fill="rgb(232,111,31)"/><text x="49.7795%" y="415.50">hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::force_io..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (8,321 samples, 28.06%)</title><rect x="49.6172%" y="389" width="28.0631%" height="15" fill="rgb(245,82,37)"/><text x="49.8672%" y="399.50">hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_rea..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_keep_alive (8,376 samples, 28.25%)</title><rect x="49.4452%" y="437" width="28.2486%" height="15" fill="rgb(227,149,46)"/><text x="49.6952%" y="447.50">hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_rea..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_keep_alive (4 samples, 0.01%)</title><rect x="77.6803%" y="421" width="0.0135%" height="15" fill="rgb(218,36,50)"/><text x="77.9303%" y="431.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::poll_ready (38 samples, 0.13%)</title><rect x="77.7107%" y="421" width="0.1282%" height="15" fill="rgb(226,80,48)"/><text x="77.9607%" y="431.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.01%)</title><rect x="77.8625%" y="405" width="0.0101%" height="15" fill="rgb(238,224,15)"/><text x="78.1125%" y="415.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.02%)</title><rect x="77.8894%" y="389" width="0.0202%" height="15" fill="rgb(241,136,10)"/><text x="78.1394%" y="399.50"></text></g><g><title>core::pin::Pin&lt;P&gt;::set (15 samples, 0.05%)</title><rect x="77.8726%" y="405" width="0.0506%" height="15" fill="rgb(208,32,45)"/><text x="78.1226%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::future::from_generator::GenFuture&lt;smoller_http::hello::{{closure}}&gt;&gt;&gt; (4 samples, 0.01%)</title><rect x="77.9097%" y="389" width="0.0135%" height="15" fill="rgb(207,135,9)"/><text x="78.1597%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (4 samples, 0.01%)</title><rect x="77.9232%" y="405" width="0.0135%" height="15" fill="rgb(206,86,44)"/><text x="78.1732%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::uri::Uri&gt; (3 samples, 0.01%)</title><rect x="77.9367%" y="405" width="0.0101%" height="15" fill="rgb(245,177,15)"/><text x="78.1867%" y="415.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.01%)</title><rect x="77.9468%" y="389" width="0.0101%" height="15" fill="rgb(206,64,50)"/><text x="78.1968%" y="399.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (38 samples, 0.13%)</title><rect x="77.8389%" y="421" width="0.1282%" height="15" fill="rgb(234,36,40)"/><text x="78.0889%" y="431.50"></text></g><g><title>http::request::Request&lt;T&gt;::new (6 samples, 0.02%)</title><rect x="77.9468%" y="405" width="0.0202%" height="15" fill="rgb(213,64,8)"/><text x="78.1968%" y="415.50"></text></g><g><title>http::request::Parts::new (3 samples, 0.01%)</title><rect x="77.9569%" y="389" width="0.0101%" height="15" fill="rgb(210,75,36)"/><text x="78.2069%" y="399.50"></text></g><g><title>hyper::body::body::Body::empty (3 samples, 0.01%)</title><rect x="77.9738%" y="421" width="0.0101%" height="15" fill="rgb(229,88,21)"/><text x="78.2238%" y="431.50"></text></g><g><title>hyper::body::body::Body::new (3 samples, 0.01%)</title><rect x="77.9738%" y="405" width="0.0101%" height="15" fill="rgb(252,204,47)"/><text x="78.2238%" y="415.50"></text></g><g><title>hyper::proto::h1::Http1Transaction::should_read_first (3 samples, 0.01%)</title><rect x="78.0277%" y="405" width="0.0101%" height="15" fill="rgb(208,77,27)"/><text x="78.2777%" y="415.50"></text></g><g><title>&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::is_client (3 samples, 0.01%)</title><rect x="78.0277%" y="389" width="0.0101%" height="15" fill="rgb(221,76,26)"/><text x="78.2777%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.01%)</title><rect x="78.0513%" y="389" width="0.0101%" height="15" fill="rgb(225,139,18)"/><text x="78.3013%" y="399.50"></text></g><g><title>&lt;smoller::net::TcpStream as futures_io::if_std::AsyncRead&gt;::poll_read (123 samples, 0.41%)</title><rect x="78.1222%" y="357" width="0.4148%" height="15" fill="rgb(230,137,11)"/><text x="78.3722%" y="367.50"></text></g><g><title>&lt;smoller_http::compat::HyperStream as tokio::io::async_read::AsyncRead&gt;::poll_read (66 samples, 0.22%)</title><rect x="78.5640%" y="309" width="0.2226%" height="15" fill="rgb(212,28,1)"/><text x="78.8140%" y="319.50"></text></g><g><title>&lt;smoller_http::compat::HyperStream as tokio::io::async_read::AsyncRead&gt;::poll_read (4,837 samples, 16.31%)</title><rect x="78.0952%" y="373" width="16.3131%" height="15" fill="rgb(248,164,17)"/><text x="78.3452%" y="383.50">&lt;smoller_http::compat::Hy..</text></g><g><title>tokio::io::read_buf::ReadBuf::initialize_unfilled (4,702 samples, 15.86%)</title><rect x="78.5505%" y="357" width="15.8578%" height="15" fill="rgb(222,171,42)"/><text x="78.8005%" y="367.50">tokio::io::read_buf::Rea..</text></g><g><title>tokio::io::read_buf::ReadBuf::initialize_unfilled_to (4,701 samples, 15.85%)</title><rect x="78.5538%" y="341" width="15.8544%" height="15" fill="rgb(243,84,45)"/><text x="78.8038%" y="351.50">tokio::io::read_buf::Rea..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (4,698 samples, 15.84%)</title><rect x="78.5640%" y="325" width="15.8443%" height="15" fill="rgb(252,49,23)"/><text x="78.8140%" y="335.50">core::ptr::mut_ptr::&lt;imp..</text></g><g><title>core::intrinsics::write_bytes (4,632 samples, 15.62%)</title><rect x="78.7866%" y="309" width="15.6217%" height="15" fill="rgb(215,19,7)"/><text x="79.0366%" y="319.50">core::intrinsics::write_..</text></g><g><title>__memset_avx2_unaligned_erms (4,631 samples, 15.62%)</title><rect x="78.7899%" y="293" width="15.6184%" height="15" fill="rgb(238,81,41)"/><text x="79.0399%" y="303.50">__memset_avx2_unaligned_..</text></g><g><title>hyper::proto::h1::io::ReadStrategy::next (3 samples, 0.01%)</title><rect x="94.4117%" y="373" width="0.0101%" height="15" fill="rgb(210,199,37)"/><text x="94.6617%" y="383.50"></text></g><g><title>hyper::proto::h1::io::ReadStrategy::record (6 samples, 0.02%)</title><rect x="94.4218%" y="373" width="0.0202%" height="15" fill="rgb(244,192,49)"/><text x="94.6718%" y="383.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (4,856 samples, 16.38%)</title><rect x="78.0682%" y="389" width="16.3772%" height="15" fill="rgb(226,211,11)"/><text x="78.3182%" y="399.50">hyper::proto::h1::io::Buf..</text></g><g><title>hyper::proto::h1::io::ReadStrategy::max (21 samples, 0.07%)</title><rect x="94.4454%" y="389" width="0.0708%" height="15" fill="rgb(236,162,54)"/><text x="94.6954%" y="399.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::parse (4 samples, 0.01%)</title><rect x="94.5432%" y="373" width="0.0135%" height="15" fill="rgb(220,229,9)"/><text x="94.7932%" y="383.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (13,412 samples, 45.23%)</title><rect x="49.3373%" y="453" width="45.2329%" height="15" fill="rgb(250,87,22)"/><text x="49.5873%" y="463.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (5,004 samples, 16.88%)</title><rect x="77.6938%" y="437" width="16.8763%" height="15" fill="rgb(239,43,17)"/><text x="77.9438%" y="447.50">hyper::proto::h1::dispatch..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (4,918 samples, 16.59%)</title><rect x="77.9839%" y="421" width="16.5863%" height="15" fill="rgb(231,177,25)"/><text x="78.2339%" y="431.50">hyper::proto::h1::conn::Co..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (4,902 samples, 16.53%)</title><rect x="78.0378%" y="405" width="16.5323%" height="15" fill="rgb(219,179,1)"/><text x="78.2878%" y="415.50">hyper::proto::h1::io::Buff..</text></g><g><title>hyper::proto::h1::role::parse_headers (16 samples, 0.05%)</title><rect x="94.5162%" y="389" width="0.0540%" height="15" fill="rgb(238,219,53)"/><text x="94.7662%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::Span&gt; (3 samples, 0.01%)</title><rect x="94.5600%" y="373" width="0.0101%" height="15" fill="rgb(232,167,36)"/><text x="94.8100%" y="383.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;&amp;str&gt;&gt;::from (15 samples, 0.05%)</title><rect x="95.0356%" y="373" width="0.0506%" height="15" fill="rgb(244,19,51)"/><text x="95.2856%" y="383.50"></text></g><g><title>&lt;hyper::body::body::Body as core::convert::From&lt;&amp;str&gt;&gt;::from (61 samples, 0.21%)</title><rect x="95.0356%" y="389" width="0.2057%" height="15" fill="rgb(224,6,22)"/><text x="95.2856%" y="399.50"></text></g><g><title>&lt;hyper::body::body::Body as core::convert::From&lt;bytes::bytes::Bytes&gt;&gt;::from (46 samples, 0.16%)</title><rect x="95.0862%" y="373" width="0.1551%" height="15" fill="rgb(224,145,5)"/><text x="95.3362%" y="383.50"></text></g><g><title>hyper::body::body::Body::new (18 samples, 0.06%)</title><rect x="95.1806%" y="357" width="0.0607%" height="15" fill="rgb(234,130,49)"/><text x="95.4306%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned (6 samples, 0.02%)</title><rect x="95.2413%" y="389" width="0.0202%" height="15" fill="rgb(254,6,2)"/><text x="95.4913%" y="399.50"></text></g><g><title>__memmove_avx_unaligned_erms (36 samples, 0.12%)</title><rect x="95.2615%" y="389" width="0.1214%" height="15" fill="rgb(208,96,46)"/><text x="95.5115%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;hyper::body::body::Extra&gt;&gt;&gt; (10 samples, 0.03%)</title><rect x="95.3830%" y="389" width="0.0337%" height="15" fill="rgb(239,3,39)"/><text x="95.6330%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[http::header::map::Pos]&gt;&gt; (26 samples, 0.09%)</title><rect x="95.4470%" y="341" width="0.0877%" height="15" fill="rgb(233,210,1)"/><text x="95.6970%" y="351.50"></text></g><g><title>alloc::alloc::box_free (25 samples, 0.08%)</title><rect x="95.4504%" y="325" width="0.0843%" height="15" fill="rgb(244,137,37)"/><text x="95.7004%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.08%)</title><rect x="95.4504%" y="309" width="0.0843%" height="15" fill="rgb(240,136,2)"/><text x="95.7004%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.08%)</title><rect x="95.4504%" y="293" width="0.0843%" height="15" fill="rgb(239,18,37)"/><text x="95.7004%" y="303.50"></text></g><g><title>__GI___libc_free (25 samples, 0.08%)</title><rect x="95.4504%" y="277" width="0.0843%" height="15" fill="rgb(218,185,22)"/><text x="95.7004%" y="287.50"></text></g><g><title>_int_free (11 samples, 0.04%)</title><rect x="95.4976%" y="261" width="0.0371%" height="15" fill="rgb(225,218,4)"/><text x="95.7476%" y="271.50"></text></g><g><title>__GI___libc_free (6 samples, 0.02%)</title><rect x="95.5448%" y="229" width="0.0202%" height="15" fill="rgb(230,182,32)"/><text x="95.7948%" y="239.50"></text></g><g><title>__GI___libc_free (272 samples, 0.92%)</title><rect x="95.6224%" y="53" width="0.9173%" height="15" fill="rgb(242,56,43)"/><text x="95.8724%" y="63.50"></text></g><g><title>_int_free (259 samples, 0.87%)</title><rect x="95.6663%" y="37" width="0.8735%" height="15" fill="rgb(233,99,24)"/><text x="95.9163%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;[http::header::map::Bucket&lt;http::header::value::HeaderValue&gt;]&gt; (299 samples, 1.01%)</title><rect x="95.5347%" y="309" width="1.0084%" height="15" fill="rgb(234,209,42)"/><text x="95.7847%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::Bucket&lt;http::header::value::HeaderValue&gt;&gt; (296 samples, 1.00%)</title><rect x="95.5448%" y="293" width="0.9983%" height="15" fill="rgb(227,7,12)"/><text x="95.7948%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::value::HeaderValue&gt; (296 samples, 1.00%)</title><rect x="95.5448%" y="277" width="0.9983%" height="15" fill="rgb(245,203,43)"/><text x="95.7948%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (296 samples, 1.00%)</title><rect x="95.5448%" y="261" width="0.9983%" height="15" fill="rgb(238,205,33)"/><text x="95.7948%" y="271.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (296 samples, 1.00%)</title><rect x="95.5448%" y="245" width="0.9983%" height="15" fill="rgb(231,56,7)"/><text x="95.7948%" y="255.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (290 samples, 0.98%)</title><rect x="95.5651%" y="229" width="0.9780%" height="15" fill="rgb(244,186,29)"/><text x="95.8151%" y="239.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (290 samples, 0.98%)</title><rect x="95.5651%" y="213" width="0.9780%" height="15" fill="rgb(234,111,31)"/><text x="95.8151%" y="223.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::{{closure}} (290 samples, 0.98%)</title><rect x="95.5651%" y="197" width="0.9780%" height="15" fill="rgb(241,149,10)"/><text x="95.8151%" y="207.50"></text></g><g><title>bytes::bytes_mut::release_shared (282 samples, 0.95%)</title><rect x="95.5921%" y="181" width="0.9511%" height="15" fill="rgb(249,206,44)"/><text x="95.8421%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes_mut::Shared&gt;&gt; (274 samples, 0.92%)</title><rect x="95.6190%" y="165" width="0.9241%" height="15" fill="rgb(251,153,30)"/><text x="95.8690%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::Shared&gt; (274 samples, 0.92%)</title><rect x="95.6190%" y="149" width="0.9241%" height="15" fill="rgb(239,152,38)"/><text x="95.8690%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (274 samples, 0.92%)</title><rect x="95.6190%" y="133" width="0.9241%" height="15" fill="rgb(249,139,47)"/><text x="95.8690%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (274 samples, 0.92%)</title><rect x="95.6190%" y="117" width="0.9241%" height="15" fill="rgb(244,64,35)"/><text x="95.8690%" y="127.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (274 samples, 0.92%)</title><rect x="95.6190%" y="101" width="0.9241%" height="15" fill="rgb(216,46,15)"/><text x="95.8690%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (273 samples, 0.92%)</title><rect x="95.6224%" y="85" width="0.9207%" height="15" fill="rgb(250,74,19)"/><text x="95.8724%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (273 samples, 0.92%)</title><rect x="95.6224%" y="69" width="0.9207%" height="15" fill="rgb(249,42,33)"/><text x="95.8724%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (301 samples, 1.02%)</title><rect x="95.5347%" y="325" width="1.0151%" height="15" fill="rgb(242,149,17)"/><text x="95.7847%" y="335.50"></text></g><g><title>__GI___libc_free (16 samples, 0.05%)</title><rect x="96.5532%" y="261" width="0.0540%" height="15" fill="rgb(244,29,21)"/><text x="96.8032%" y="271.50"></text></g><g><title>_int_free (8 samples, 0.03%)</title><rect x="96.5802%" y="245" width="0.0270%" height="15" fill="rgb(220,130,37)"/><text x="96.8302%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.06%)</title><rect x="96.5499%" y="293" width="0.0641%" height="15" fill="rgb(211,67,2)"/><text x="96.7999%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.06%)</title><rect x="96.5499%" y="277" width="0.0641%" height="15" fill="rgb(235,68,52)"/><text x="96.7999%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;http::header::map::Bucket&lt;http::header::value::HeaderValue&gt;&gt;&gt; (325 samples, 1.10%)</title><rect x="95.5347%" y="341" width="1.0961%" height="15" fill="rgb(246,142,3)"/><text x="95.7847%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;http::header::map::Bucket&lt;http::header::value::HeaderValue&gt;&gt;&gt; (24 samples, 0.08%)</title><rect x="96.5499%" y="325" width="0.0809%" height="15" fill="rgb(241,25,7)"/><text x="96.7999%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.08%)</title><rect x="96.5499%" y="309" width="0.0809%" height="15" fill="rgb(242,119,39)"/><text x="96.7999%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.02%)</title><rect x="96.6139%" y="293" width="0.0169%" height="15" fill="rgb(241,98,45)"/><text x="96.8639%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (355 samples, 1.20%)</title><rect x="95.4369%" y="357" width="1.1973%" height="15" fill="rgb(254,28,30)"/><text x="95.6869%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::uri::authority::Authority&gt; (5 samples, 0.02%)</title><rect x="96.6342%" y="341" width="0.0169%" height="15" fill="rgb(241,142,54)"/><text x="96.8842%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::byte_str::ByteStr&gt; (5 samples, 0.02%)</title><rect x="96.6342%" y="325" width="0.0169%" height="15" fill="rgb(222,85,15)"/><text x="96.8842%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (5 samples, 0.02%)</title><rect x="96.6342%" y="309" width="0.0169%" height="15" fill="rgb(210,85,47)"/><text x="96.8842%" y="319.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="96.6342%" y="293" width="0.0169%" height="15" fill="rgb(224,206,25)"/><text x="96.8842%" y="303.50"></text></g><g><title>bytes::bytes::static_drop (5 samples, 0.02%)</title><rect x="96.6342%" y="277" width="0.0169%" height="15" fill="rgb(243,201,19)"/><text x="96.8842%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::request::Request&lt;hyper::body::body::Body&gt;&gt; (367 samples, 1.24%)</title><rect x="95.4167%" y="389" width="1.2377%" height="15" fill="rgb(236,59,4)"/><text x="95.6667%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::request::Parts&gt; (361 samples, 1.22%)</title><rect x="95.4369%" y="373" width="1.2175%" height="15" fill="rgb(254,179,45)"/><text x="95.6869%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::uri::Uri&gt; (6 samples, 0.02%)</title><rect x="96.6342%" y="357" width="0.0202%" height="15" fill="rgb(226,14,10)"/><text x="96.8842%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::body::Body&gt; (16 samples, 0.05%)</title><rect x="96.6544%" y="389" width="0.0540%" height="15" fill="rgb(244,27,41)"/><text x="96.9044%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::body::Kind&gt; (5 samples, 0.02%)</title><rect x="96.6915%" y="373" width="0.0169%" height="15" fill="rgb(235,35,32)"/><text x="96.9415%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;bytes::bytes::Bytes&gt;&gt; (4 samples, 0.01%)</title><rect x="96.6949%" y="357" width="0.0135%" height="15" fill="rgb(218,68,31)"/><text x="96.9449%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (570 samples, 1.92%)</title><rect x="94.8906%" y="421" width="1.9224%" height="15" fill="rgb(207,120,37)"/><text x="95.1406%" y="431.50">&lt;..</text></g><g><title>smoller_http::hello::{{closure}} (551 samples, 1.86%)</title><rect x="94.9546%" y="405" width="1.8583%" height="15" fill="rgb(227,98,0)"/><text x="95.2046%" y="415.50">s..</text></g><g><title>http::response::Response&lt;T&gt;::new (31 samples, 0.10%)</title><rect x="96.7084%" y="389" width="0.1045%" height="15" fill="rgb(207,7,3)"/><text x="96.9584%" y="399.50"></text></g><g><title>http::response::Parts::new (3 samples, 0.01%)</title><rect x="96.8028%" y="373" width="0.0101%" height="15" fill="rgb(206,98,19)"/><text x="97.0528%" y="383.50"></text></g><g><title>&lt;core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt; as core::ops::try_trait::Try&gt;::branch (30 samples, 0.10%)</title><rect x="96.8129%" y="421" width="0.1012%" height="15" fill="rgb(217,5,26)"/><text x="97.0629%" y="431.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::poll_msg (634 samples, 2.14%)</title><rect x="94.7860%" y="437" width="2.1382%" height="15" fill="rgb(235,190,38)"/><text x="95.0360%" y="447.50">&lt;..</text></g><g><title>core::pin::Pin&lt;P&gt;::set (3 samples, 0.01%)</title><rect x="96.9141%" y="421" width="0.0101%" height="15" fill="rgb(247,86,24)"/><text x="97.1641%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::future::from_generator::GenFuture&lt;smoller_http::hello::{{closure}}&gt;&gt;&gt; (3 samples, 0.01%)</title><rect x="96.9141%" y="405" width="0.0101%" height="15" fill="rgb(205,101,16)"/><text x="97.1641%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (3 samples, 0.01%)</title><rect x="96.9310%" y="437" width="0.0101%" height="15" fill="rgb(246,168,33)"/><text x="97.1810%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (3 samples, 0.01%)</title><rect x="96.9310%" y="421" width="0.0101%" height="15" fill="rgb(231,114,1)"/><text x="97.1810%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;hyper::body::body::Extra&gt;&gt;&gt; (5 samples, 0.02%)</title><rect x="96.9411%" y="437" width="0.0169%" height="15" fill="rgb(207,184,53)"/><text x="97.1911%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::body::Body&gt; (8 samples, 0.03%)</title><rect x="96.9579%" y="437" width="0.0270%" height="15" fill="rgb(224,95,51)"/><text x="97.2079%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::body::Kind&gt; (3 samples, 0.01%)</title><rect x="96.9748%" y="421" width="0.0101%" height="15" fill="rgb(212,188,45)"/><text x="97.2248%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;bytes::bytes::Bytes&gt;&gt; (3 samples, 0.01%)</title><rect x="96.9748%" y="405" width="0.0101%" height="15" fill="rgb(223,154,38)"/><text x="97.2248%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (3 samples, 0.01%)</title><rect x="96.9917%" y="421" width="0.0101%" height="15" fill="rgb(251,22,52)"/><text x="97.2417%" y="431.50"></text></g><g><title>core::mem::take (3 samples, 0.01%)</title><rect x="96.9917%" y="405" width="0.0101%" height="15" fill="rgb(229,209,22)"/><text x="97.2417%" y="415.50"></text></g><g><title>core::mem::replace (3 samples, 0.01%)</title><rect x="96.9917%" y="389" width="0.0101%" height="15" fill="rgb(234,138,34)"/><text x="97.2417%" y="399.50"></text></g><g><title>core::ptr::read (3 samples, 0.01%)</title><rect x="96.9917%" y="373" width="0.0101%" height="15" fill="rgb(212,95,11)"/><text x="97.2417%" y="383.50"></text></g><g><title>hyper::body::take_full_data (24 samples, 0.08%)</title><rect x="96.9849%" y="437" width="0.0809%" height="15" fill="rgb(240,179,47)"/><text x="97.2349%" y="447.50"></text></g><g><title>hyper::body::body::Body::take_full_data (19 samples, 0.06%)</title><rect x="97.0018%" y="421" width="0.0641%" height="15" fill="rgb(240,163,11)"/><text x="97.2518%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (13 samples, 0.04%)</title><rect x="97.0220%" y="405" width="0.0438%" height="15" fill="rgb(236,37,12)"/><text x="97.2720%" y="415.50"></text></g><g><title>core::mem::take (13 samples, 0.04%)</title><rect x="97.0220%" y="389" width="0.0438%" height="15" fill="rgb(232,164,16)"/><text x="97.2720%" y="399.50"></text></g><g><title>core::mem::replace (13 samples, 0.04%)</title><rect x="97.0220%" y="373" width="0.0438%" height="15" fill="rgb(244,205,15)"/><text x="97.2720%" y="383.50"></text></g><g><title>core::ptr::read (12 samples, 0.04%)</title><rect x="97.0254%" y="357" width="0.0405%" height="15" fill="rgb(223,117,47)"/><text x="97.2754%" y="367.50"></text></g><g><title>hyper::proto::h1::Http1Transaction::should_read_first (3 samples, 0.01%)</title><rect x="97.0726%" y="421" width="0.0101%" height="15" fill="rgb(244,107,35)"/><text x="97.3226%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::iter (7 samples, 0.02%)</title><rect x="97.0827%" y="373" width="0.0236%" height="15" fill="rgb(205,140,8)"/><text x="97.3327%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_as_slice (7 samples, 0.02%)</title><rect x="97.0827%" y="357" width="0.0236%" height="15" fill="rgb(228,84,46)"/><text x="97.3327%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (7 samples, 0.02%)</title><rect x="97.0827%" y="341" width="0.0236%" height="15" fill="rgb(254,188,9)"/><text x="97.3327%" y="351.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::can_write_head (16 samples, 0.05%)</title><rect x="97.0659%" y="437" width="0.0540%" height="15" fill="rgb(206,112,54)"/><text x="97.3159%" y="447.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::can_headers_buf (11 samples, 0.04%)</title><rect x="97.0827%" y="421" width="0.0371%" height="15" fill="rgb(216,84,49)"/><text x="97.3327%" y="431.50"></text></g><g><title>bytes::buf::buf_impl::Buf::has_remaining (11 samples, 0.04%)</title><rect x="97.0827%" y="405" width="0.0371%" height="15" fill="rgb(214,194,35)"/><text x="97.3327%" y="415.50"></text></g><g><title>&lt;hyper::common::buf::BufList&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (11 samples, 0.04%)</title><rect x="97.0827%" y="389" width="0.0371%" height="15" fill="rgb(249,28,3)"/><text x="97.3327%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (4 samples, 0.01%)</title><rect x="97.1063%" y="373" width="0.0135%" height="15" fill="rgb(222,56,52)"/><text x="97.3563%" y="383.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (4 samples, 0.01%)</title><rect x="97.1063%" y="357" width="0.0135%" height="15" fill="rgb(245,217,50)"/><text x="97.3563%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.01%)</title><rect x="97.1097%" y="341" width="0.0101%" height="15" fill="rgb(213,201,24)"/><text x="97.3597%" y="351.50"></text></g><g><title>hyper::proto::h1::Http1Transaction::should_read_first (3 samples, 0.01%)</title><rect x="97.2109%" y="405" width="0.0101%" height="15" fill="rgb(248,116,28)"/><text x="97.4609%" y="415.50"></text></g><g><title>&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::is_client (3 samples, 0.01%)</title><rect x="97.2109%" y="389" width="0.0101%" height="15" fill="rgb(219,72,43)"/><text x="97.4609%" y="399.50"></text></g><g><title>hyper::proto::h1::conn::State::wants_keep_alive (9 samples, 0.03%)</title><rect x="97.2210%" y="405" width="0.0304%" height="15" fill="rgb(209,138,14)"/><text x="97.4710%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (28 samples, 0.09%)</title><rect x="97.3964%" y="373" width="0.0944%" height="15" fill="rgb(222,18,33)"/><text x="97.6464%" y="383.50"></text></g><g><title>core::mem::take (3 samples, 0.01%)</title><rect x="97.5043%" y="373" width="0.0101%" height="15" fill="rgb(213,199,7)"/><text x="97.7543%" y="383.50"></text></g><g><title>core::mem::replace (3 samples, 0.01%)</title><rect x="97.5043%" y="357" width="0.0101%" height="15" fill="rgb(250,110,10)"/><text x="97.7543%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (16 samples, 0.05%)</title><rect x="97.5144%" y="373" width="0.0540%" height="15" fill="rgb(248,123,6)"/><text x="97.7644%" y="383.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::encode (6 samples, 0.02%)</title><rect x="97.5718%" y="357" width="0.0202%" height="15" fill="rgb(206,91,31)"/><text x="97.8218%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.01%)</title><rect x="97.7134%" y="261" width="0.0135%" height="15" fill="rgb(211,154,13)"/><text x="97.9634%" y="271.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server::encode_headers_with_lower_case::LowercaseWriter as hyper::proto::h1::role::HeaderNameWriter&gt;::write_header_name_with_colon (10 samples, 0.03%)</title><rect x="97.7033%" y="341" width="0.0337%" height="15" fill="rgb(225,148,7)"/><text x="97.9533%" y="351.50"></text></g><g><title>hyper::proto::h1::role::extend (10 samples, 0.03%)</title><rect x="97.7033%" y="325" width="0.0337%" height="15" fill="rgb(220,160,43)"/><text x="97.9533%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (10 samples, 0.03%)</title><rect x="97.7033%" y="309" width="0.0337%" height="15" fill="rgb(213,52,39)"/><text x="97.9533%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (10 samples, 0.03%)</title><rect x="97.7033%" y="293" width="0.0337%" height="15" fill="rgb(243,137,7)"/><text x="97.9533%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (9 samples, 0.03%)</title><rect x="97.7067%" y="277" width="0.0304%" height="15" fill="rgb(230,79,13)"/><text x="97.9567%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="97.7269%" y="261" width="0.0101%" height="15" fill="rgb(247,105,23)"/><text x="97.9769%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::Drain&lt;http::header::value::HeaderValue&gt;&gt; (8 samples, 0.03%)</title><rect x="97.7438%" y="341" width="0.0270%" height="15" fill="rgb(223,179,41)"/><text x="97.9938%" y="351.50"></text></g><g><title>&lt;http::header::map::Drain&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.03%)</title><rect x="97.7438%" y="325" width="0.0270%" height="15" fill="rgb(218,9,34)"/><text x="97.9938%" y="335.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="97.7572%" y="309" width="0.0135%" height="15" fill="rgb(222,106,8)"/><text x="98.0072%" y="319.50"></text></g><g><title>&lt;http::header::map::Drain&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="97.7572%" y="293" width="0.0135%" height="15" fill="rgb(211,220,0)"/><text x="98.0072%" y="303.50"></text></g><g><title>hyper::common::date::CACHED::__getit (12 samples, 0.04%)</title><rect x="97.7876%" y="293" width="0.0405%" height="15" fill="rgb(229,52,16)"/><text x="98.0376%" y="303.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (3 samples, 0.01%)</title><rect x="97.8179%" y="277" width="0.0101%" height="15" fill="rgb(212,155,18)"/><text x="98.0679%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 0.02%)</title><rect x="97.8281%" y="277" width="0.0169%" height="15" fill="rgb(242,21,14)"/><text x="98.0781%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.02%)</title><rect x="97.8281%" y="261" width="0.0169%" height="15" fill="rgb(222,19,48)"/><text x="98.0781%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (5 samples, 0.02%)</title><rect x="97.8281%" y="245" width="0.0169%" height="15" fill="rgb(232,45,27)"/><text x="98.0781%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="97.8348%" y="229" width="0.0101%" height="15" fill="rgb(249,103,42)"/><text x="98.0848%" y="239.50"></text></g><g><title>hyper::common::date::extend (22 samples, 0.07%)</title><rect x="97.7775%" y="341" width="0.0742%" height="15" fill="rgb(246,81,33)"/><text x="98.0275%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (22 samples, 0.07%)</title><rect x="97.7775%" y="325" width="0.0742%" height="15" fill="rgb(252,33,42)"/><text x="98.0275%" y="335.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (19 samples, 0.06%)</title><rect x="97.7876%" y="309" width="0.0641%" height="15" fill="rgb(209,212,41)"/><text x="98.0376%" y="319.50"></text></g><g><title>hyper::common::date::extend::{{closure}} (7 samples, 0.02%)</title><rect x="97.8281%" y="293" width="0.0236%" height="15" fill="rgb(207,154,6)"/><text x="98.0781%" y="303.50"></text></g><g><title>hyper::proto::h1::role::Server::can_have_body (5 samples, 0.02%)</title><rect x="97.8517%" y="341" width="0.0169%" height="15" fill="rgb(223,64,47)"/><text x="98.1017%" y="351.50"></text></g><g><title>hyper::proto::h1::role::Server::can_chunked (5 samples, 0.02%)</title><rect x="97.8517%" y="325" width="0.0169%" height="15" fill="rgb(211,161,38)"/><text x="98.1017%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.01%)</title><rect x="97.8584%" y="309" width="0.0101%" height="15" fill="rgb(219,138,40)"/><text x="98.1084%" y="319.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="97.8584%" y="293" width="0.0101%" height="15" fill="rgb(241,228,46)"/><text x="98.1084%" y="303.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::encode (5 samples, 0.02%)</title><rect x="97.8685%" y="293" width="0.0169%" height="15" fill="rgb(223,209,38)"/><text x="98.1185%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.01%)</title><rect x="97.8888%" y="277" width="0.0101%" height="15" fill="rgb(236,164,45)"/><text x="98.1388%" y="287.50"></text></g><g><title>hyper::proto::h1::role::extend (43 samples, 0.15%)</title><rect x="97.8685%" y="341" width="0.1450%" height="15" fill="rgb(231,15,5)"/><text x="98.1185%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (43 samples, 0.15%)</title><rect x="97.8685%" y="325" width="0.1450%" height="15" fill="rgb(252,35,15)"/><text x="98.1185%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (43 samples, 0.15%)</title><rect x="97.8685%" y="309" width="0.1450%" height="15" fill="rgb(248,181,18)"/><text x="98.1185%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (38 samples, 0.13%)</title><rect x="97.8854%" y="293" width="0.1282%" height="15" fill="rgb(233,39,42)"/><text x="98.1354%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.11%)</title><rect x="97.8989%" y="277" width="0.1147%" height="15" fill="rgb(238,110,33)"/><text x="98.1489%" y="287.50"></text></g><g><title>itoa::Buffer::format (33 samples, 0.11%)</title><rect x="98.0136%" y="325" width="0.1113%" height="15" fill="rgb(233,195,10)"/><text x="98.2636%" y="335.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (33 samples, 0.11%)</title><rect x="98.0136%" y="309" width="0.1113%" height="15" fill="rgb(254,105,3)"/><text x="98.2636%" y="319.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (33 samples, 0.11%)</title><rect x="98.0136%" y="293" width="0.1113%" height="15" fill="rgb(221,225,9)"/><text x="98.2636%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.10%)</title><rect x="98.0203%" y="277" width="0.1045%" height="15" fill="rgb(224,227,45)"/><text x="98.2703%" y="287.50"></text></g><g><title>hyper::proto::h1::role::Server::encode_headers_with_lower_case (169 samples, 0.57%)</title><rect x="97.5718%" y="373" width="0.5700%" height="15" fill="rgb(229,198,43)"/><text x="97.8218%" y="383.50"></text></g><g><title>hyper::proto::h1::role::Server::encode_headers (163 samples, 0.55%)</title><rect x="97.5920%" y="357" width="0.5497%" height="15" fill="rgb(206,209,35)"/><text x="97.8420%" y="367.50"></text></g><g><title>itoa::write (38 samples, 0.13%)</title><rect x="98.0136%" y="341" width="0.1282%" height="15" fill="rgb(245,195,53)"/><text x="98.2636%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (5 samples, 0.02%)</title><rect x="98.1249%" y="325" width="0.0169%" height="15" fill="rgb(240,92,26)"/><text x="98.3749%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (5 samples, 0.02%)</title><rect x="98.1249%" y="309" width="0.0169%" height="15" fill="rgb(207,40,23)"/><text x="98.3749%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (5 samples, 0.02%)</title><rect x="98.1249%" y="293" width="0.0169%" height="15" fill="rgb(223,111,35)"/><text x="98.3749%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 0.02%)</title><rect x="98.1249%" y="277" width="0.0169%" height="15" fill="rgb(229,147,28)"/><text x="98.3749%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.02%)</title><rect x="98.1249%" y="261" width="0.0169%" height="15" fill="rgb(211,29,28)"/><text x="98.3749%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (5 samples, 0.02%)</title><rect x="98.1249%" y="245" width="0.0169%" height="15" fill="rgb(228,72,33)"/><text x="98.3749%" y="255.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::encode (264 samples, 0.89%)</title><rect x="97.3525%" y="389" width="0.8904%" height="15" fill="rgb(205,214,31)"/><text x="97.6025%" y="399.50"></text></g><g><title>hyper::proto::h1::role::extend (30 samples, 0.10%)</title><rect x="98.1417%" y="373" width="0.1012%" height="15" fill="rgb(224,111,15)"/><text x="98.3917%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (30 samples, 0.10%)</title><rect x="98.1417%" y="357" width="0.1012%" height="15" fill="rgb(253,21,26)"/><text x="98.3917%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (30 samples, 0.10%)</title><rect x="98.1417%" y="341" width="0.1012%" height="15" fill="rgb(245,139,43)"/><text x="98.3917%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (30 samples, 0.10%)</title><rect x="98.1417%" y="325" width="0.1012%" height="15" fill="rgb(252,170,7)"/><text x="98.3917%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (30 samples, 0.10%)</title><rect x="98.1417%" y="309" width="0.1012%" height="15" fill="rgb(231,118,14)"/><text x="98.3917%" y="319.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::encode_head (326 samples, 1.10%)</title><rect x="97.1502%" y="421" width="1.0995%" height="15" fill="rgb(238,83,0)"/><text x="97.4002%" y="431.50"></text></g><g><title>hyper::proto::h1::role::encode_headers (295 samples, 0.99%)</title><rect x="97.2547%" y="405" width="0.9949%" height="15" fill="rgb(221,39,39)"/><text x="97.5047%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned (5 samples, 0.02%)</title><rect x="98.3272%" y="325" width="0.0169%" height="15" fill="rgb(222,119,46)"/><text x="98.5772%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (16 samples, 0.05%)</title><rect x="98.3137%" y="389" width="0.0540%" height="15" fill="rgb(222,165,49)"/><text x="98.5637%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (16 samples, 0.05%)</title><rect x="98.3137%" y="373" width="0.0540%" height="15" fill="rgb(219,113,52)"/><text x="98.5637%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (16 samples, 0.05%)</title><rect x="98.3137%" y="357" width="0.0540%" height="15" fill="rgb(214,7,15)"/><text x="98.5637%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.04%)</title><rect x="98.3238%" y="341" width="0.0438%" height="15" fill="rgb(235,32,4)"/><text x="98.5738%" y="351.50"></text></g><g><title>__memmove_avx_unaligned_erms (7 samples, 0.02%)</title><rect x="98.3441%" y="325" width="0.0236%" height="15" fill="rgb(238,90,54)"/><text x="98.5941%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (3 samples, 0.01%)</title><rect x="98.3677%" y="389" width="0.0101%" height="15" fill="rgb(213,208,19)"/><text x="98.6177%" y="399.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="98.3677%" y="373" width="0.0101%" height="15" fill="rgb(233,156,4)"/><text x="98.6177%" y="383.50"></text></g><g><title>bytes::bytes::static_drop (3 samples, 0.01%)</title><rect x="98.3677%" y="357" width="0.0101%" height="15" fill="rgb(207,194,5)"/><text x="98.6177%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (3 samples, 0.01%)</title><rect x="98.3778%" y="389" width="0.0101%" height="15" fill="rgb(206,111,30)"/><text x="98.6278%" y="399.50"></text></g><g><title>hyper::proto::h1::io::Cursor&lt;alloc::vec::Vec&lt;u8&gt;&gt;::maybe_unshift (13 samples, 0.04%)</title><rect x="98.3879%" y="389" width="0.0438%" height="15" fill="rgb(243,70,54)"/><text x="98.6379%" y="399.50"></text></g><g><title>hyper::proto::h1::encode::Encoder::danger_full_buf (56 samples, 0.19%)</title><rect x="98.2496%" y="421" width="0.1889%" height="15" fill="rgb(242,28,8)"/><text x="98.4996%" y="431.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer (45 samples, 0.15%)</title><rect x="98.2867%" y="405" width="0.1518%" height="15" fill="rgb(219,106,18)"/><text x="98.5367%" y="415.50"></text></g><g><title>hyper::proto::h1::encode::Encoder::is_eof (3 samples, 0.01%)</title><rect x="98.4385%" y="421" width="0.0101%" height="15" fill="rgb(244,222,10)"/><text x="98.6885%" y="431.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (19,642 samples, 66.24%)</title><rect x="32.2181%" y="533" width="66.2440%" height="15" fill="rgb(236,179,52)"/><text x="32.4681%" y="543.50">&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (19,642 samples, 66.24%)</title><rect x="32.2181%" y="517" width="66.2440%" height="15" fill="rgb(213,23,39)"/><text x="32.4681%" y="527.50">&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (19,642 samples, 66.24%)</title><rect x="32.2181%" y="501" width="66.2440%" height="15" fill="rgb(238,48,10)"/><text x="32.4681%" y="511.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (19,641 samples, 66.24%)</title><rect x="32.2215%" y="485" width="66.2406%" height="15" fill="rgb(251,196,23)"/><text x="32.4715%" y="495.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (19,612 samples, 66.14%)</title><rect x="32.3193%" y="469" width="66.1428%" height="15" fill="rgb(250,152,24)"/><text x="32.5693%" y="479.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (1,154 samples, 3.89%)</title><rect x="94.5702%" y="453" width="3.8919%" height="15" fill="rgb(209,150,17)"/><text x="94.8202%" y="463.50">hype..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_full_msg (398 samples, 1.34%)</title><rect x="97.1198%" y="437" width="1.3423%" height="15" fill="rgb(234,202,34)"/><text x="97.3698%" y="447.50"></text></g><g><title>hyper::proto::h1::encode::Encoder::is_last (4 samples, 0.01%)</title><rect x="98.4486%" y="421" width="0.0135%" height="15" fill="rgb(253,148,53)"/><text x="98.6986%" y="431.50"></text></g><g><title>&lt;hyper::server::conn::Connection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (19,648 samples, 66.26%)</title><rect x="32.2148%" y="549" width="66.2642%" height="15" fill="rgb(218,129,16)"/><text x="32.4648%" y="559.50">&lt;hyper::server::conn::Connection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll</text></g><g><title>core::option::Option&lt;T&gt;::as_mut (5 samples, 0.02%)</title><rect x="98.4621%" y="533" width="0.0169%" height="15" fill="rgb(216,85,19)"/><text x="98.7121%" y="543.50"></text></g><g><title>smoller::runtime::core::RawTask&lt;F&gt;::run (19,662 samples, 66.31%)</title><rect x="32.1777%" y="597" width="66.3114%" height="15" fill="rgb(235,228,7)"/><text x="32.4277%" y="607.50">smoller::runtime::core::RawTask&lt;F&gt;::run</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (19,653 samples, 66.28%)</title><rect x="32.2080%" y="581" width="66.2811%" height="15" fill="rgb(245,175,0)"/><text x="32.4580%" y="591.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>smoller_http::main::{{closure}}::{{closure}} (19,652 samples, 66.28%)</title><rect x="32.2114%" y="565" width="66.2777%" height="15" fill="rgb(208,168,36)"/><text x="32.4614%" y="575.50">smoller_http::main::{{closure}}::{{closure}}</text></g><g><title>__GI___libc_free (8 samples, 0.03%)</title><rect x="98.5194%" y="453" width="0.0270%" height="15" fill="rgb(246,171,24)"/><text x="98.7694%" y="463.50"></text></g><g><title>_int_free (7 samples, 0.02%)</title><rect x="98.5228%" y="437" width="0.0236%" height="15" fill="rgb(215,142,24)"/><text x="98.7728%" y="447.50"></text></g><g><title>unlink_chunk.constprop.0 (3 samples, 0.01%)</title><rect x="98.5363%" y="421" width="0.0101%" height="15" fill="rgb(250,187,7)"/><text x="98.7863%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;core::task::wake::Waker&gt;&gt; (10 samples, 0.03%)</title><rect x="98.5194%" y="581" width="0.0337%" height="15" fill="rgb(228,66,33)"/><text x="98.7694%" y="591.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.03%)</title><rect x="98.5194%" y="565" width="0.0337%" height="15" fill="rgb(234,215,21)"/><text x="98.7694%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;core::task::wake::Waker,alloc::alloc::Global&gt;&gt; (10 samples, 0.03%)</title><rect x="98.5194%" y="549" width="0.0337%" height="15" fill="rgb(222,191,20)"/><text x="98.7694%" y="559.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.03%)</title><rect x="98.5194%" y="533" width="0.0337%" height="15" fill="rgb(245,79,54)"/><text x="98.7694%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::task::wake::Waker&gt;&gt; (10 samples, 0.03%)</title><rect x="98.5194%" y="517" width="0.0337%" height="15" fill="rgb(240,10,37)"/><text x="98.7694%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.03%)</title><rect x="98.5194%" y="501" width="0.0337%" height="15" fill="rgb(214,192,32)"/><text x="98.7694%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.03%)</title><rect x="98.5194%" y="485" width="0.0337%" height="15" fill="rgb(209,36,54)"/><text x="98.7694%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.03%)</title><rect x="98.5194%" y="469" width="0.0337%" height="15" fill="rgb(220,10,11)"/><text x="98.7694%" y="479.50"></text></g><g><title>epoll_wait (41 samples, 0.14%)</title><rect x="98.5700%" y="549" width="0.1383%" height="15" fill="rgb(221,106,17)"/><text x="98.8200%" y="559.50"></text></g><g><title>[unknown] (38 samples, 0.13%)</title><rect x="98.5801%" y="533" width="0.1282%" height="15" fill="rgb(251,142,44)"/><text x="98.8301%" y="543.50"></text></g><g><title>[unknown] (38 samples, 0.13%)</title><rect x="98.5801%" y="517" width="0.1282%" height="15" fill="rgb(238,13,15)"/><text x="98.8301%" y="527.50"></text></g><g><title>[unknown] (38 samples, 0.13%)</title><rect x="98.5801%" y="501" width="0.1282%" height="15" fill="rgb(208,107,27)"/><text x="98.8301%" y="511.50"></text></g><g><title>[unknown] (37 samples, 0.12%)</title><rect x="98.5835%" y="485" width="0.1248%" height="15" fill="rgb(205,136,37)"/><text x="98.8335%" y="495.50"></text></g><g><title>[unknown] (28 samples, 0.09%)</title><rect x="98.6139%" y="469" width="0.0944%" height="15" fill="rgb(250,205,27)"/><text x="98.8639%" y="479.50"></text></g><g><title>[unknown] (10 samples, 0.03%)</title><rect x="98.6746%" y="453" width="0.0337%" height="15" fill="rgb(210,80,43)"/><text x="98.9246%" y="463.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="98.6948%" y="437" width="0.0135%" height="15" fill="rgb(247,160,36)"/><text x="98.9448%" y="447.50"></text></g><g><title>polling::epoll::Poller::modify (48 samples, 0.16%)</title><rect x="98.7083%" y="549" width="0.1619%" height="15" fill="rgb(234,13,49)"/><text x="98.9583%" y="559.50"></text></g><g><title>polling::epoll::Poller::ctl (44 samples, 0.15%)</title><rect x="98.7218%" y="533" width="0.1484%" height="15" fill="rgb(234,122,0)"/><text x="98.9718%" y="543.50"></text></g><g><title>__GI_epoll_ctl (43 samples, 0.15%)</title><rect x="98.7252%" y="517" width="0.1450%" height="15" fill="rgb(207,146,38)"/><text x="98.9752%" y="527.50"></text></g><g><title>[unknown] (43 samples, 0.15%)</title><rect x="98.7252%" y="501" width="0.1450%" height="15" fill="rgb(207,177,25)"/><text x="98.9752%" y="511.50"></text></g><g><title>[unknown] (40 samples, 0.13%)</title><rect x="98.7353%" y="485" width="0.1349%" height="15" fill="rgb(211,178,42)"/><text x="98.9853%" y="495.50"></text></g><g><title>[unknown] (38 samples, 0.13%)</title><rect x="98.7420%" y="469" width="0.1282%" height="15" fill="rgb(230,69,54)"/><text x="98.9920%" y="479.50"></text></g><g><title>[unknown] (35 samples, 0.12%)</title><rect x="98.7522%" y="453" width="0.1180%" height="15" fill="rgb(214,135,41)"/><text x="99.0022%" y="463.50"></text></g><g><title>[unknown] (23 samples, 0.08%)</title><rect x="98.7926%" y="437" width="0.0776%" height="15" fill="rgb(237,67,25)"/><text x="99.0426%" y="447.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="98.8500%" y="421" width="0.0202%" height="15" fill="rgb(222,189,50)"/><text x="99.1000%" y="431.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="98.8601%" y="405" width="0.0101%" height="15" fill="rgb(245,148,34)"/><text x="99.1101%" y="415.50"></text></g><g><title>polling::Poller::wait (122 samples, 0.41%)</title><rect x="98.5532%" y="581" width="0.4115%" height="15" fill="rgb(222,29,6)"/><text x="98.8032%" y="591.50"></text></g><g><title>polling::epoll::Poller::wait (122 samples, 0.41%)</title><rect x="98.5532%" y="565" width="0.4115%" height="15" fill="rgb(221,189,43)"/><text x="98.8032%" y="575.50"></text></g><g><title>syscall (28 samples, 0.09%)</title><rect x="98.8702%" y="549" width="0.0944%" height="15" fill="rgb(207,36,27)"/><text x="99.1202%" y="559.50"></text></g><g><title>[unknown] (27 samples, 0.09%)</title><rect x="98.8736%" y="533" width="0.0911%" height="15" fill="rgb(217,90,24)"/><text x="99.1236%" y="543.50"></text></g><g><title>[unknown] (22 samples, 0.07%)</title><rect x="98.8904%" y="517" width="0.0742%" height="15" fill="rgb(224,66,35)"/><text x="99.1404%" y="527.50"></text></g><g><title>[unknown] (22 samples, 0.07%)</title><rect x="98.8904%" y="501" width="0.0742%" height="15" fill="rgb(221,13,50)"/><text x="99.1404%" y="511.50"></text></g><g><title>[unknown] (20 samples, 0.07%)</title><rect x="98.8972%" y="485" width="0.0675%" height="15" fill="rgb(236,68,49)"/><text x="99.1472%" y="495.50"></text></g><g><title>[unknown] (15 samples, 0.05%)</title><rect x="98.9140%" y="469" width="0.0506%" height="15" fill="rgb(229,146,28)"/><text x="99.1640%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="98.9478%" y="453" width="0.0169%" height="15" fill="rgb(225,31,38)"/><text x="99.1978%" y="463.50"></text></g><g><title>smoller::runtime::core::Interest::has_interest (12 samples, 0.04%)</title><rect x="98.9646%" y="581" width="0.0405%" height="15" fill="rgb(250,208,3)"/><text x="99.2146%" y="591.50"></text></g><g><title>smoller::runtime::core::Interest::wakers (6 samples, 0.02%)</title><rect x="98.9849%" y="565" width="0.0202%" height="15" fill="rgb(246,54,23)"/><text x="99.2349%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (14 samples, 0.05%)</title><rect x="99.3221%" y="517" width="0.0472%" height="15" fill="rgb(243,76,11)"/><text x="99.5721%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (105 samples, 0.35%)</title><rect x="99.0422%" y="565" width="0.3541%" height="15" fill="rgb(245,21,50)"/><text x="99.2922%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (99 samples, 0.33%)</title><rect x="99.0624%" y="549" width="0.3339%" height="15" fill="rgb(228,9,43)"/><text x="99.3124%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (28 samples, 0.09%)</title><rect x="99.3019%" y="533" width="0.0944%" height="15" fill="rgb(208,100,47)"/><text x="99.5519%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.03%)</title><rect x="99.3693%" y="517" width="0.0270%" height="15" fill="rgb(232,26,8)"/><text x="99.6193%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (4 samples, 0.01%)</title><rect x="99.3997%" y="533" width="0.0135%" height="15" fill="rgb(216,166,38)"/><text x="99.6497%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (4 samples, 0.01%)</title><rect x="99.3997%" y="517" width="0.0135%" height="15" fill="rgb(251,202,51)"/><text x="99.6497%" y="527.50"></text></g><g><title>_int_free (3 samples, 0.01%)</title><rect x="99.4469%" y="405" width="0.0101%" height="15" fill="rgb(254,216,34)"/><text x="99.6969%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (17 samples, 0.06%)</title><rect x="99.4165%" y="485" width="0.0573%" height="15" fill="rgb(251,32,27)"/><text x="99.6665%" y="495.50"></text></g><g><title>alloc::alloc::Global::grow_impl (17 samples, 0.06%)</title><rect x="99.4165%" y="469" width="0.0573%" height="15" fill="rgb(208,127,28)"/><text x="99.6665%" y="479.50"></text></g><g><title>alloc::alloc::realloc (17 samples, 0.06%)</title><rect x="99.4165%" y="453" width="0.0573%" height="15" fill="rgb(224,137,22)"/><text x="99.6665%" y="463.50"></text></g><g><title>__GI___libc_realloc (17 samples, 0.06%)</title><rect x="99.4165%" y="437" width="0.0573%" height="15" fill="rgb(254,70,32)"/><text x="99.6665%" y="447.50"></text></g><g><title>_int_realloc (16 samples, 0.05%)</title><rect x="99.4199%" y="421" width="0.0540%" height="15" fill="rgb(229,75,37)"/><text x="99.6699%" y="431.50"></text></g><g><title>_int_malloc (5 samples, 0.02%)</title><rect x="99.4570%" y="405" width="0.0169%" height="15" fill="rgb(252,64,23)"/><text x="99.7070%" y="415.50"></text></g><g><title>unlink_chunk.constprop.0 (3 samples, 0.01%)</title><rect x="99.4638%" y="389" width="0.0101%" height="15" fill="rgb(232,162,48)"/><text x="99.7138%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 0.06%)</title><rect x="99.4165%" y="501" width="0.0607%" height="15" fill="rgb(246,160,12)"/><text x="99.6665%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (26 samples, 0.09%)</title><rect x="99.3963%" y="565" width="0.0877%" height="15" fill="rgb(247,166,0)"/><text x="99.6463%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (26 samples, 0.09%)</title><rect x="99.3963%" y="549" width="0.0877%" height="15" fill="rgb(249,219,21)"/><text x="99.6463%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (21 samples, 0.07%)</title><rect x="99.4132%" y="533" width="0.0708%" height="15" fill="rgb(205,209,3)"/><text x="99.6632%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (21 samples, 0.07%)</title><rect x="99.4132%" y="517" width="0.0708%" height="15" fill="rgb(243,44,1)"/><text x="99.6632%" y="527.50"></text></g><g><title>smoller::runtime::core::Interest::take (144 samples, 0.49%)</title><rect x="99.0051%" y="581" width="0.4856%" height="15" fill="rgb(206,159,16)"/><text x="99.2551%" y="591.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (12 samples, 0.04%)</title><rect x="99.7302%" y="405" width="0.0405%" height="15" fill="rgb(244,77,30)"/><text x="99.9802%" y="415.50"></text></g><g><title>core::ptr::write (12 samples, 0.04%)</title><rect x="99.7302%" y="389" width="0.0405%" height="15" fill="rgb(218,69,12)"/><text x="99.9802%" y="399.50"></text></g><g><title>smoller::runtime::core::RawTask&lt;F&gt;::wake (84 samples, 0.28%)</title><rect x="99.5042%" y="485" width="0.2833%" height="15" fill="rgb(212,87,7)"/><text x="99.7542%" y="495.50"></text></g><g><title>smoller::runtime::core::RawTask&lt;F&gt;::schedule (37 samples, 0.12%)</title><rect x="99.6627%" y="469" width="0.1248%" height="15" fill="rgb(245,114,25)"/><text x="99.9127%" y="479.50"></text></g><g><title>smoller::util::LocalCell&lt;T&gt;::with (36 samples, 0.12%)</title><rect x="99.6661%" y="453" width="0.1214%" height="15" fill="rgb(210,61,42)"/><text x="99.9161%" y="463.50"></text></g><g><title>smoller::runtime::core::RawTask&lt;F&gt;::schedule::{{closure}} (36 samples, 0.12%)</title><rect x="99.6661%" y="437" width="0.1214%" height="15" fill="rgb(211,52,33)"/><text x="99.9161%" y="447.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (36 samples, 0.12%)</title><rect x="99.6661%" y="421" width="0.1214%" height="15" fill="rgb(234,58,33)"/><text x="99.9161%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_full (5 samples, 0.02%)</title><rect x="99.7707%" y="405" width="0.0169%" height="15" fill="rgb(220,115,36)"/><text x="100.0207%" y="415.50"></text></g><g><title>smoller::util::wake (89 samples, 0.30%)</title><rect x="99.4907%" y="581" width="0.3002%" height="15" fill="rgb(243,153,54)"/><text x="99.7407%" y="591.50"></text></g><g><title>std::panic::catch_unwind (88 samples, 0.30%)</title><rect x="99.4941%" y="565" width="0.2968%" height="15" fill="rgb(251,47,18)"/><text x="99.7441%" y="575.50"></text></g><g><title>std::panicking::try (88 samples, 0.30%)</title><rect x="99.4941%" y="549" width="0.2968%" height="15" fill="rgb(242,102,42)"/><text x="99.7441%" y="559.50"></text></g><g><title>std::panicking::try::do_call (88 samples, 0.30%)</title><rect x="99.4941%" y="533" width="0.2968%" height="15" fill="rgb(234,31,38)"/><text x="99.7441%" y="543.50"></text></g><g><title>smoller::util::wake::{{closure}} (88 samples, 0.30%)</title><rect x="99.4941%" y="517" width="0.2968%" height="15" fill="rgb(221,117,51)"/><text x="99.7441%" y="527.50"></text></g><g><title>core::task::wake::Waker::wake (88 samples, 0.30%)</title><rect x="99.4941%" y="501" width="0.2968%" height="15" fill="rgb(212,20,18)"/><text x="99.7441%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="99.9258%" y="501" width="0.0101%" height="15" fill="rgb(245,133,36)"/><text x="100.1758%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="99.9258%" y="485" width="0.0101%" height="15" fill="rgb(212,6,19)"/><text x="100.1758%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="99.9258%" y="469" width="0.0101%" height="15" fill="rgb(218,1,36)"/><text x="100.1758%" y="479.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.01%)</title><rect x="99.9258%" y="453" width="0.0101%" height="15" fill="rgb(246,84,54)"/><text x="100.1758%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (5 samples, 0.02%)</title><rect x="99.9359%" y="453" width="0.0169%" height="15" fill="rgb(242,110,6)"/><text x="100.1859%" y="463.50"></text></g><g><title>smoller::runtime::core::Shared::drive_io (435 samples, 1.47%)</title><rect x="98.4891%" y="597" width="1.4671%" height="15" fill="rgb(214,47,5)"/><text x="98.7391%" y="607.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (49 samples, 0.17%)</title><rect x="99.7909%" y="581" width="0.1653%" height="15" fill="rgb(218,159,25)"/><text x="100.0409%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (49 samples, 0.17%)</title><rect x="99.7909%" y="565" width="0.1653%" height="15" fill="rgb(215,211,28)"/><text x="100.0409%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (49 samples, 0.17%)</title><rect x="99.7909%" y="549" width="0.1653%" height="15" fill="rgb(238,59,32)"/><text x="100.0409%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (49 samples, 0.17%)</title><rect x="99.7909%" y="533" width="0.1653%" height="15" fill="rgb(226,82,3)"/><text x="100.0409%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (49 samples, 0.17%)</title><rect x="99.7909%" y="517" width="0.1653%" height="15" fill="rgb(240,164,32)"/><text x="100.0409%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (6 samples, 0.02%)</title><rect x="99.9359%" y="501" width="0.0202%" height="15" fill="rgb(232,46,7)"/><text x="100.1859%" y="511.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (6 samples, 0.02%)</title><rect x="99.9359%" y="485" width="0.0202%" height="15" fill="rgb(229,129,53)"/><text x="100.1859%" y="495.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (6 samples, 0.02%)</title><rect x="99.9359%" y="469" width="0.0202%" height="15" fill="rgb(234,188,29)"/><text x="100.1859%" y="479.50"></text></g><g><title>std::panic::catch_unwind (20,113 samples, 67.83%)</title><rect x="32.1439%" y="805" width="67.8325%" height="15" fill="rgb(246,141,4)"/><text x="32.3939%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (20,113 samples, 67.83%)</title><rect x="32.1439%" y="789" width="67.8325%" height="15" fill="rgb(229,23,39)"/><text x="32.3939%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (20,113 samples, 67.83%)</title><rect x="32.1439%" y="773" width="67.8325%" height="15" fill="rgb(206,12,3)"/><text x="32.3939%" y="783.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (20,113 samples, 67.83%)</title><rect x="32.1439%" y="757" width="67.8325%" height="15" fill="rgb(252,226,20)"/><text x="32.3939%" y="767.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (20,113 samples, 67.83%)</title><rect x="32.1439%" y="741" width="67.8325%" height="15" fill="rgb(216,123,35)"/><text x="32.3939%" y="751.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (20,113 samples, 67.83%)</title><rect x="32.1439%" y="725" width="67.8325%" height="15" fill="rgb(212,68,40)"/><text x="32.3939%" y="735.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (20,113 samples, 67.83%)</title><rect x="32.1439%" y="709" width="67.8325%" height="15" fill="rgb(254,125,32)"/><text x="32.3939%" y="719.50">core::ops::function::FnOnce::call_once</text></g><g><title>smoller_http::main (20,113 samples, 67.83%)</title><rect x="32.1439%" y="693" width="67.8325%" height="15" fill="rgb(253,97,22)"/><text x="32.3939%" y="703.50">smoller_http::main</text></g><g><title>smoller::runtime::block_on (20,113 samples, 67.83%)</title><rect x="32.1439%" y="677" width="67.8325%" height="15" fill="rgb(241,101,14)"/><text x="32.3939%" y="687.50">smoller::runtime::block_on</text></g><g><title>smoller::runtime::Runtime::block_on (20,113 samples, 67.83%)</title><rect x="32.1439%" y="661" width="67.8325%" height="15" fill="rgb(238,103,29)"/><text x="32.3939%" y="671.50">smoller::runtime::Runtime::block_on</text></g><g><title>smoller::runtime::core::Core::block_on (20,113 samples, 67.83%)</title><rect x="32.1439%" y="645" width="67.8325%" height="15" fill="rgb(233,195,47)"/><text x="32.3939%" y="655.50">smoller::runtime::core::Core::block_on</text></g><g><title>smoller::util::LocalCell&lt;T&gt;::with (20,113 samples, 67.83%)</title><rect x="32.1439%" y="629" width="67.8325%" height="15" fill="rgb(246,218,30)"/><text x="32.3939%" y="639.50">smoller::util::LocalCell&lt;T&gt;::with</text></g><g><title>smoller::runtime::core::Core::block_on::{{closure}} (20,113 samples, 67.83%)</title><rect x="32.1439%" y="613" width="67.8325%" height="15" fill="rgb(219,145,47)"/><text x="32.3939%" y="623.50">smoller::runtime::core::Core::block_on::{{closure}}</text></g><g><title>smoller::runtime::core::Task::run (6 samples, 0.02%)</title><rect x="99.9562%" y="597" width="0.0202%" height="15" fill="rgb(243,12,26)"/><text x="100.2062%" y="607.50"></text></g><g><title>__libc_start_main (20,114 samples, 67.84%)</title><rect x="32.1439%" y="917" width="67.8358%" height="15" fill="rgb(214,87,16)"/><text x="32.3939%" y="927.50">__libc_start_main</text></g><g><title>main (20,114 samples, 67.84%)</title><rect x="32.1439%" y="901" width="67.8358%" height="15" fill="rgb(208,99,42)"/><text x="32.3939%" y="911.50">main</text></g><g><title>std::rt::lang_start_internal (20,114 samples, 67.84%)</title><rect x="32.1439%" y="885" width="67.8358%" height="15" fill="rgb(253,99,2)"/><text x="32.3939%" y="895.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (20,114 samples, 67.84%)</title><rect x="32.1439%" y="869" width="67.8358%" height="15" fill="rgb(220,168,23)"/><text x="32.3939%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (20,114 samples, 67.84%)</title><rect x="32.1439%" y="853" width="67.8358%" height="15" fill="rgb(242,38,24)"/><text x="32.3939%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (20,114 samples, 67.84%)</title><rect x="32.1439%" y="837" width="67.8358%" height="15" fill="rgb(225,182,9)"/><text x="32.3939%" y="847.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (20,114 samples, 67.84%)</title><rect x="32.1439%" y="821" width="67.8358%" height="15" fill="rgb(243,178,37)"/><text x="32.3939%" y="831.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="99.9798%" y="901" width="0.0135%" height="15" fill="rgb(232,139,19)"/><text x="100.2298%" y="911.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="99.9798%" y="885" width="0.0135%" height="15" fill="rgb(225,201,24)"/><text x="100.2298%" y="895.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="99.9798%" y="869" width="0.0135%" height="15" fill="rgb(221,47,46)"/><text x="100.2298%" y="879.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="99.9798%" y="853" width="0.0135%" height="15" fill="rgb(249,23,13)"/><text x="100.2298%" y="863.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="99.9798%" y="837" width="0.0135%" height="15" fill="rgb(219,9,5)"/><text x="100.2298%" y="847.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="99.9831%" y="821" width="0.0101%" height="15" fill="rgb(254,171,16)"/><text x="100.2331%" y="831.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="99.9831%" y="805" width="0.0101%" height="15" fill="rgb(230,171,20)"/><text x="100.2331%" y="815.50"></text></g><g><title>all (29,651 samples, 100%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(210,71,41)"/><text x="0.2500%" y="975.50"></text></g><g><title>smoller_http (29,651 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(206,173,20)"/><text x="0.2500%" y="959.50">smoller_http</text></g><g><title>_start (20,121 samples, 67.86%)</title><rect x="32.1406%" y="933" width="67.8594%" height="15" fill="rgb(233,88,34)"/><text x="32.3906%" y="943.50">_start</text></g><g><title>_dl_start (6 samples, 0.02%)</title><rect x="99.9798%" y="917" width="0.0202%" height="15" fill="rgb(223,209,46)"/><text x="100.2298%" y="927.50"></text></g></svg></svg>